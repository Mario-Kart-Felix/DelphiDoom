/*************************************************************\
	Doom Builder Game Configuration for DelphiDoom
\*************************************************************/

// This is required to prevent accidental use of a different configuration
type = "Doom Builder 2 Game Configuration";

// This is the title to show for this game
game = "DelphiDoom (Doom in UDMF format)";

// This is the simplified game engine/sourceport name
engine = "DelphiDoom";

// The format interface handles the map data format
formatinterface = "UniversalMapSetIO";

// Default lump name for new map
defaultlumpname = "MAP01";

// Default testing parameters
testparameters = "-iwad \"%WP\" -skill \"%S\" -file \"%AP\" \"%F\" -warp %L1 %L2 %NM";

// Default nodebuilder configurations
//defaultsavecompiler = "zdbsp_normal";
//defaulttestcompiler = "zdbsp_fast";

// Skill levels
skills
{
	1 = "I'm too young to die";
	2 = "Hey, not too rough";
	3 = "Hurt me plenty";
	4 = "Ultra-Violence";
	5 = "Nightmare!";
}

// When this is set to true, sectors with the same tag will light up when a line is highlighted
linetagindicatesectors = true;

// Special linedefs
// See linedefflags
soundlinedefflag = "blocksound";
singlesidedflag = "blocking";
doublesidedflag = "twosided";
impassableflag = "blocking";
upperunpeggedflag = "dontpegtop";
lowerunpeggedflag = "dontpegbottom";

// Door making
makedoortrack = "DOORTRAK";
makedooraction = 1;			// See linedeftypes

// Generalized actions
generalizedlinedefs = true;
generalizedsectors = true;

// Texture loading options
mixtexturesflats = false;
defaulttexturescale = 1.0f;
defaultflatscale = 1.0f;


// Some common settings
include("Includes\\Common.cfg");

/*
ADDITIONAL UNIVERSAL DOOM MAP FORMAT FIELD DEFINITIONS
Only add fields here that Doom Builder does not edit with its own user-interface!
The "default" field must match the UDMF specifications!

Field data types:
0 = integer *
1 = float
2 = string
3 = bool
4 = linedef action (integer) *
5 = sector effect (integer) *
6 = texture (string)
7 = flat (string)
8 = angle in degrees (integer)
9 = angle in radians (float)
10 = XXRRGGBB color (integer)
11 = enum option (integer) *
12 = enum bits (integer) *
13 = sector tag (integer) *
14 = thing tag (integer) *
15 = linedef tag (integer) *
16 = enum option (string)
17 = angle in degrees (float)
22 = byte angle (integer)
*/
universalfields
{
	linedef
	{
		comment
		{
			type = 2;
			default = "";
		}
	}

	sidedef
	{
		offsetx_bottom
		{
			type = 1;
			default = 0.0f;
		}

		offsetx_top
		{
			type = 1;
			default = 0.0f;
		}

		offsetx_mid
		{
			type = 1;
			default = 0.0f;
		}

		offsety_bottom
		{
			type = 1;
			default = 0.0f;
		}

		offsety_top
		{
			type = 1;
			default = 0.0f;
		}

		offsety_mid
		{
			type = 1;
			default = 0.0f;
		}

		nofakecontrast
		{
			type = 3;
			default = false;
		}

		comment
		{
			type = 2;
			default = "";
		}
	}

	thing
	{
		comment
		{
			type = 2;
			default = "";
		}
	}

	sector
	{
		comment
		{
			type = 2;
			default = "";
		}
        	xpanningfloor
		{
			type = 1;
			default = 0.0f;
		}

		ypanningfloor
		{
			type = 1;
			default = 0.0f;
		}

		xpanningceiling
		{
			type = 1;
			default = 0.0f;
		}

		ypanningceiling
		{
			type = 1;
			default = 0.0f;
		}

		rotationfloor
		{
			type = 17;
			default = 0.0f;
		}

		rotationfloorx
		{
			type = 1;
			default = 0.0f;
		}

		rotationfloory
		{
			type = 1;
			default = 0.0f;
		}

		rotationceiling
		{
			type = 17;
			default = 0.0f;
		}

		rotationceilingx
		{
			type = 1;
			default = 0.0f;
		}

		rotationceilingx
		{
			type = 1;
			default = 0.0f;
		}

		gravity
		{
			type = 1;
			default = 1.0f;
		}

		windthrust
		{
			type = 1;
			default = 0.0f;
		}

		windangle
		{
			type = 1;
			default = 0.0f;
		}

		fog
		{
			type = 3;
			default = false;
		}

		ripplefloor
		{
			type = 3;
			default = false;
		}

		rippleceiling
		{
			type = 3;
			default = false;
		}	

		nojump
		{
			type = 3;
			default = false;
		}

		nocrouch
		{
			type = 3;
			default = false;
		}

		ceilingplane_a
		{
			type = 1;
			default = 0.0f;
		}	

		ceilingplane_b
		{
			type = 1;
			default = 0.0f;
		}	

		ceilingplane_c
		{
			type = 1;
			default = 0.0f;
		}	

		ceilingplane_d
		{
			type = 1;
			default = 0.0f;
		}	

		floorplane_a
		{
			type = 1;
			default = 0.0f;
		}	

		floorplane_b
		{
			type = 1;
			default = 0.0f;
		}	

		floorplane_c
		{
			type = 1;
			default = 0.0f;
		}	

		floorplane_d
		{
			type = 1;
			default = 0.0f;
		}	
		sound
		{
			type = 2;
			default = "";
		}
	}
}


// Default flags for first new thing
defaultthingflags
{
	skill1;
	skill2;
	skill3;
	skill4;
	skill5;
	single;
	coop;
	dm;
}


// Texture sources
textures
{
	include("Includes\\Doom_misc.cfg", "textures");
}

// Patch sources
patches
{
	include("Includes\\Doom_misc.cfg", "patches");
}

// Sprite sources
sprites
{
	include("Includes\\Doom_misc.cfg", "sprites");
}

// Flat sources
flats
{
	include("Includes\\Doom_misc.cfg", "flats");
}

// Colormap sources
colormaps
{
	include("Includes\\Boom_misc.cfg", "colormaps");
}


/*
GAME DETECT PATTERN
Used to guess the game for which a WAD file is made.

1 = One of these lumps must exist
2 = None of these lumps must exist
3 = All of these lumps must exist
*/

gamedetect
{
	TEXTMAP = 3;
	ENDMAP = 3;
}


maplumpnames
{
	include("Includes\\UDMF_misc.cfg", "udmfmaplumpnames_begin");
	BEHAVIOR
	{
		required = false;
		nodebuild = false;
		blindcopy = true;
	}
	
	SCRIPTS
	{
		required = false;
		nodebuild = false;
		scriptbuild = true;
	}
	include("Includes\\UDMF_misc.cfg", "udmfmaplumpnames_end");
}


// Default sector brightness levels
sectorbrightness
{
	include("Includes\\Doom_misc.cfg", "sectorbrightness");
}


// Generalized sector types
gen_sectortypes
{
	include("Includes\\Boom_generalized.cfg", "gen_sectortypes");
	death
	{
		0 = "No";
		4096 = "Yes";
	}
	killmonster
	{
		0 = "No";
		8192 = "Yes";
	}
}


// SECTOR TYPES
sectortypes
{
	include("Includes\\Doom_sectors.cfg");
	19 = "Light Indoor 1";
	20 = "Light Indoor 2";
	22 = "Light Sequence Start";
	23 = "Light Sequence Special 1";
	24 = "Light Sequence Special 2";
	26 = "Stairs Special 1";
	27 = "Stairs Special 2";
}


// LINEDEF FLAGS
linedefflags
{
	include("Includes\\UDMF_misc.cfg", "linedefflags");
	include("Includes\\Boom_misc.cfg", "linedefflags");
	triggerscripts = "Trigger PascalScript";
	noclipping = "No clipping";
	blocklandmonsters = "Block land monsters (MBF21)";
	blockplayers = "Block players (MBF21)";
}


// LINEDEF ACTIVATIONS
linedefactivations
{
	oldstyle = "Default oldstyle line";
	playercross = "When player walks over";
	playeruse = "When player presses use";
	monstercross = "When monster walks over";
	monsteruse = "When monster presses use";
	impact = "On projectile impact";
	playerpush = "When player bumps";
	monsterpush = "When monsters bumps";
	missilecross = "When projectile crosses";
	repeatspecial = "Repeatable action";
}


// Linedef flags UDMF translation table
// This is needed for copy/paste and prefabs to work properly
// When the UDMF field name is prefixed with ! it is inverted
linedefflagstranslation
{
	include("Includes\\Doom_misc.cfg", "linedefflagstranslation");
	include("Includes\\Boom_misc.cfg", "linedefflagstranslation");
	1024 = "triggerscripts";
	2048 = "noclipping";
	4096 = "blocklandmonsters";
	8192 = "blockplayers";
}

enums
{
	delay_tics
	{
		0 = "0: No delay";
		35 = "35: 1 Second";
		70 = "70: 2 Seconds";
		105 = "105: 3 Seconds";
		140 = "140: 4 Seconds";
		175 = "175: 5 Seconds";
		210 = "210: 6 Seconds";
		245 = "245: 7 Seconds";
		280 = "280: 8 Seconds";
		315 = "315: 9 Seconds";
		350 = "350: 10 Seconds";
	}
	door_speeds
	{
		4   = "4: Animated";
		16  = "16: Slow";
		32  = "32: Normal";
		64  = "64: Fast";
		128 = "128: Turbo";
	}
	flat_speeds
	{
		8  = "8: Slow";
		16 = "16: Normal";
		32 = "32: Fast";
		64 = "64: Turbo";
	}
	keys
	{
		0 = "None";
		1 = "Red key card";
		2 = "Blue key card";
		3 = "Yellow key card";
		4 = "Red skull key";
		5 = "Blue skull key";
		6 = "Yellow skull key";
	}
	noyes
	{
		0 = "No";
		1 = "Yes";
	}
	plat_speeds
	{
		8  = "8: Slow";
		16 = "16: Normal";
		32 = "32: Lift/Fast";
		64 = "64: Turbo";
	}
	polyobj_angles
	{
		0 = "0: East";
		32 = "32: Northeast";
		64 = "64: North";
		96 = "96: Northwest";
		128 = "128: West";
		160 = "160: Southwest";
		192 = "192: South";
		224 = "224: Southeast";
		255 = "255: Constant Rotation";
	}
	polyobj_speeds
	{
		-32 = "-32: Turbo, CW";
		-16 = "-16: Fast, CW";
		-4  = "-4: Normal, CW";
		-2  = "-2: Slow, CW";
		2  = "2: Slow, CCW";
		4  = "4: Normal, CCW";
		16 = "16: Fast, CCW";
		32 = "32: Turbo, CCW";
	}
	puzzle_items
	{
		0 = "None";
	}
	reset_tics
	{
		0 = "0: Never";
		35 = "35: 1 Second";
		70 = "70: 2 Seconds";
		105 = "105: 3 Seconds";
		140 = "140: 4 Seconds";
		150 = "150: Doom default";
		175 = "175: 5 Seconds";
		210 = "210: 6 Seconds";
		245 = "245: 7 Seconds";
		280 = "280: 8 Seconds";
		315 = "315: 9 Seconds";
		350 = "350: 10 Seconds";
	}
	scroll_speeds
	{
		0 = "0: Don't scroll";
		16 = "16: Very slow";
		32 = "32: Slow";
		64 = "64: Normal"; 
		96 = "96: Fast";
		128 = "128: Very fast";
	}
	spawn_projectile
	{
		0 = "None";
	}
	spawnthing
	{
		0 = "T_NONE";
		1 = "T_POSSESSED";
		2 = "T_SHOTGUY";
		3 = "T_VILE";
		4 = "T_FIRE";
		5 = "T_UNDEAD";
		6 = "T_TRACER";
		7 = "T_SMOKE";
		8 = "T_FATSO";
		9 = "T_FATSHOT";
		10 = "T_CHAINGUY";
		11 = "T_TROOP";
		12 = "T_SERGEANT";
		13 = "T_SHADOWS";
		14 = "T_HEAD";
		15 = "T_BRUISER";
		16 = "T_BRUISERSHOT";
		17 = "T_KNIGHT";
		18 = "T_SKULL";
		19 = "T_SPIDER";
		20 = "T_BABY";
		21 = "T_CYBORG";
		22 = "T_PAIN";
		23 = "T_WOLFSS";
		24 = "T_KEEN";
		25 = "T_BOSSBRAIN";
		26 = "T_BOSSSPIT";
		27 = "T_BOSSTARGET";
		28 = "T_SPAWNSHOT";
		29 = "T_SPAWNFIRE";
		30 = "T_BARREL";
		31 = "T_TROOPSHOT";
		32 = "T_HEADSHOT";
		33 = "T_ROCKET";
		34 = "T_PLASMA";
		35 = "T_BFG";
		36 = "T_ARACHPLAZ";
		37 = "T_PUFF";
		38 = "T_BLOOD";
		39 = "T_TFOG";
		40 = "T_IFOG";
		41 = "T_TELEPORTMAN";
		42 = "T_EXTRABFG";
		43 = "T_MISC0";
		44 = "T_MISC1";
		45 = "T_MISC2";
		46 = "T_MISC3";
		47 = "T_MISC4";
		48 = "T_MISC5";
		49 = "T_MISC6";
		50 = "T_MISC7";
		51 = "T_MISC8";
		52 = "T_MISC9";
		53 = "T_MISC10";
		54 = "T_MISC11";
		55 = "T_MISC12";
		56 = "T_INV";
		57 = "T_MISC13";
		58 = "T_INS";
		59 = "T_MISC14";
		60 = "T_MISC15";
		61 = "T_MISC16";
		62 = "T_MEGA";
		63 = "T_CLIP";
		64 = "T_MISC17";
		65 = "T_MISC18";
		66 = "T_MISC19";
		67 = "T_MISC20";
		68 = "T_MISC21";
		69 = "T_MISC22";
		70 = "T_MISC23";
		71 = "T_MISC24";
		72 = "T_MISC25";
		73 = "T_CHAINGUN";
		74 = "T_MISC26";
		75 = "T_MISC27";
		76 = "T_MISC28";
		77 = "T_SHOTGUN";
		78 = "T_SUPERSHOTGUN";
		79 = "T_MISC29";
		80 = "T_MISC30";
		81 = "T_MISC31";
		82 = "T_MISC32";
		83 = "T_MISC33";
		84 = "T_MISC34";
		85 = "T_MISC35";
		86 = "T_MISC36";
		87 = "T_MISC37";
		88 = "T_MISC38";
		89 = "T_MISC39";
		90 = "T_MISC40";
		91 = "T_MISC41";
		92 = "T_MISC42";
		93 = "T_MISC43";
		94 = "T_MISC44";
		95 = "T_MISC45";
		96 = "T_MISC46";
		97 = "T_MISC47";
		98 = "T_MISC48";
		99 = "T_MISC49";
		100 = "T_MISC50";
		101 = "T_MISC51";
		102 = "T_MISC52";
		103 = "T_MISC53";
		104 = "T_MISC54";
		105 = "T_MISC55";
		106 = "T_MISC56";
		107 = "T_MISC57";
		108 = "T_MISC58";
		109 = "T_MISC59";
		110 = "T_MISC60";
		111 = "T_MISC61";
		112 = "T_MISC62";
		113 = "T_MISC63";
		114 = "T_MISC64";
		115 = "T_MISC65";
		116 = "T_MISC66";
		117 = "T_MISC67";
		118 = "T_MISC68";
		119 = "T_MISC69";
		120 = "T_MISC70";
		121 = "T_MISC71";
		122 = "T_MISC72";
		123 = "T_MISC73";
		124 = "T_MISC74";
		125 = "T_MISC75";
		126 = "T_MISC76";
		127 = "T_MISC77";
		128 = "T_MISC78";
		129 = "T_MISC79";
		130 = "T_MISC80";
		131 = "T_MISC81";
		132 = "T_MISC82";
		133 = "T_MISC83";
		134 = "T_MISC84";
		135 = "T_MISC85";
		136 = "T_MISC86";
		137 = "T_PUSH";
		138 = "T_PULL";
		139 = "T_DOGS";
		140 = "T_PLASMA1";
		141 = "T_PLASMA2";
		142 = "T_SCEPTRE";
		143 = "T_BIBLE";
	}
	stair_speeds
	{
		2  = "2: Slow";
		4  = "4: Normal";
		16 = "16: Fast";
		32 = "32: Turbo";
	}
}

// LINEDEF TYPES
linedeftypes
{

misc
{
	
	0
	{
		title = "None";
		prefix = "";
	}
}


door
{
	title = "Door";
	
	301
	{
		title = "Door Open Wait Close (also monsters)";
		prefix = "DR";
		requiresactivation = false;
	}
	
	302
	{
		title = "Door Open Stay";
		prefix = "W1";
		requiresactivation = false;
	}
	
	303
	{
		title = "Door Close Stay";
		prefix = "W1";
		requiresactivation = false;
	}
	
	304
	{
		title = "Door Open Wait Close";
		prefix = "W1";
		requiresactivation = false;
	}
	
	316
	{
		title = "Door Close Wait Open";
		prefix = "W1";
		requiresactivation = false;
	}
	
	326
	{
		title = "Door (Blue) Open Wait Close";
		prefix = "DR";
		requiresactivation = false;
	}
	
	327
	{
		title = "Door (Yellow) Open Wait Close";
		prefix = "DR";
		requiresactivation = false;
	}
	
	328
	{
		title = "Door (Red) Open Wait Close";
		prefix = "DR";
		requiresactivation = false;
	}
	
	329
	{
		title = "Door Open Wait Close";
		prefix = "S1";
		requiresactivation = false;
	}
	
	331
	{
		title = "Door Open Stay";
		prefix = "D1";
		requiresactivation = false;
	}
	
	332
	{
		title = "Door (Blue) Open Stay";
		prefix = "D1";
		requiresactivation = false;
	}
	
	333
	{
		title = "Door (Red) Open Stay";
		prefix = "D1";
		requiresactivation = false;
	}
	
	334
	{
		title = "Door (Yellow) Open Stay";
		prefix = "D1";
		requiresactivation = false;
	}
	
	342
	{
		title = "Door Close Stay";
		prefix = "SR";
		requiresactivation = false;
	}
	
	346
	{
		title = "Door Open Stay";
		prefix = "GR";
		requiresactivation = false;
	}
	
	350
	{
		title = "Door Close Stay";
		prefix = "S1";
		requiresactivation = false;
	}
	
	361
	{
		title = "Door Open Stay";
		prefix = "SR";
		requiresactivation = false;
	}
	
	363
	{
		title = "Door Open Wait Close";
		prefix = "SR";
		requiresactivation = false;
	}
	
	375
	{
		title = "Door Close Stay";
		prefix = "WR";
		requiresactivation = false;
	}
	
	376
	{
		title = "Door Close Stay Open";
		prefix = "WR";
		requiresactivation = false;
	}
	
	386
	{
		title = "Door Open Stay";
		prefix = "WR";
		requiresactivation = false;
	}
	
	390
	{
		title = "Door Open Wait Close";
		prefix = "WR";
		requiresactivation = false;
	}
	
	399
	{
		title = "Door (Blue) Open Stay (fast)";
		prefix = "SR";
		requiresactivation = false;
	}
	
	403
	{
		title = "Door Open Stay";
		prefix = "S1";
		requiresactivation = false;
	}
	
	405
	{
		title = "Door Open Wait Close (fast)";
		prefix = "WR";
		requiresactivation = false;
	}
	
	406
	{
		title = "Door Open Stay (fast)";
		prefix = "WR";
		requiresactivation = false;
	}
	
	407
	{
		title = "Door Close Stay (fast)";
		prefix = "WR";
		requiresactivation = false;
	}
	
	408
	{
		title = "Door Open Wait Close (fast)";
		prefix = "W1";
		requiresactivation = false;
	}
	
	409
	{
		title = "Door Open Stay (fast)";
		prefix = "W1";
		requiresactivation = false;
	}
	
	410
	{
		title = "Door Close (fast)";
		prefix = "W1";
		requiresactivation = false;
	}
	
	411
	{
		title = "Door Open Wait Close (fast)";
		prefix = "S1";
		requiresactivation = false;
	}
	
	412
	{
		title = "Door Open Stay (fast)";
		prefix = "S1";
		requiresactivation = false;
	}
	
	413
	{
		title = "Door Close Stay (fast)";
		prefix = "S1";
		requiresactivation = false;
	}
	
	414
	{
		title = "Door Open Wait Close (fast)";
		prefix = "SR";
		requiresactivation = false;
	}
	
	415
	{
		title = "Door Open Stay (fast)";
		prefix = "SR";
		requiresactivation = false;
	}
	
	416
	{
		title = "Door Close Stay (fast)";
		prefix = "SR";
		requiresactivation = false;
	}
	
	417
	{
		title = "Door Open Wait Close (fast)";
		prefix = "DR";
		requiresactivation = false;
	}
	
	418
	{
		title = "Door Open Stay (fast)";
		prefix = "D1";
		requiresactivation = false;
	}
	
	433
	{
		title = "Door (Blue) Open Stay (fast)";
		prefix = "S1";
		requiresactivation = false;
	}
	
	434
	{
		title = "Door (Red) Open Stay (fast)";
		prefix = "SR";
		requiresactivation = false;
	}
	
	435
	{
		title = "Door (Red) Open Stay (fast)";
		prefix = "S1";
		requiresactivation = false;
	}
	
	436
	{
		title = "Door (Yellow) Open Stay (fast)";
		prefix = "SR";
		requiresactivation = false;
	}
	
	437
	{
		title = "Door (Yellow) Open Stay (fast)";
		prefix = "S1";
		requiresactivation = false;
	}
}


floor
{
	title = "Floor";
	
	305
	{
		title = "Floor Raise to Lowest Ceiling";
		prefix = "W1";
		requiresactivation = false;
	}
	
	309
	{
		title = "Floor Raise Donut (changes texture)";
		prefix = "S1";
		requiresactivation = false;
	}
	
	314
	{
		title = "Floor Raise by 32 (changes texture)";
		prefix = "S1";
		requiresactivation = false;
	}
	
	315
	{
		title = "Floor Raise by 24 (changes texture)";
		prefix = "S1";
		requiresactivation = false;
	}
	
	318
	{
		title = "Floor Raise to Next Higher Floor";
		prefix = "S1";
		requiresactivation = false;
	}
	
	319
	{
		title = "Floor Lower to Highest Floor";
		prefix = "W1";
		requiresactivation = false;
	}
	
	320
	{
		title = "Floor Raise to Next Higher Floor (changes texture)";
		prefix = "S1";
		requiresactivation = false;
	}
	
	322
	{
		title = "Floor Raise to Next Higher Floor (changes texture)";
		prefix = "W1";
		requiresactivation = false;
	}
	
	323
	{
		title = "Floor Lower to Lowest Floor";
		prefix = "S1";
		requiresactivation = false;
	}
	
	324
	{
		title = "Floor Raise to Lowest Ceiling";
		prefix = "G1";
		requiresactivation = false;
	}
	
	330
	{
		title = "Floor Raise by Shortest Lower Texture";
		prefix = "W1";
		requiresactivation = false;
	}
	
	336
	{
		title = "Floor Lower to 8 above Highest Floor";
		prefix = "W1";
		requiresactivation = false;
	}
	
	337
	{
		title = "Floor Lower to Lowest Floor (changes texture)";
		prefix = "W1";
		requiresactivation = false;
	}
	
	338
	{
		title = "Floor Lower to Lowest Floor";
		prefix = "W1";
		requiresactivation = false;
	}
	
	345
	{
		title = "Floor Lower to Highest Floor";
		prefix = "SR";
		requiresactivation = false;
	}
	
	347
	{
		title = "Floor Raise to Next Higher Floor (changes texture)";
		prefix = "G1";
		requiresactivation = false;
	}
	
	353
	{
		title = "Floor Start Moving Up and Down";
		prefix = "W1";
		requiresactivation = false;
	}
	
	354
	{
		title = "Floor Stop Moving";
		prefix = "W1";
		requiresactivation = false;
	}
	
	355
	{
		title = "Floor Raise to 8 below Lowest Ceiling (crushes)";
		prefix = "S1";
		requiresactivation = false;
	}
	
	356
	{
		title = "Floor Raise to 8 below Lowest Ceiling (crushes)";
		prefix = "W1";
		requiresactivation = false;
	}
	
	358
	{
		title = "Floor Raise by 24";
		prefix = "W1";
		requiresactivation = false;
	}
	
	359
	{
		title = "Floor Raise by 24 (changes texture)";
		prefix = "W1";
		requiresactivation = false;
	}
	
	360
	{
		title = "Floor Lower to Lowest Floor";
		prefix = "SR";
		requiresactivation = false;
	}
	
	364
	{
		title = "Floor Raise to Lowest Ceiling";
		prefix = "SR";
		requiresactivation = false;
	}
	
	365
	{
		title = "Floor Raise to 8 below Lowest Ceiling (crushes)";
		prefix = "SR";
		requiresactivation = false;
	}
	
	366
	{
		title = "Floor Raise by 24 (changes texture)";
		prefix = "SR";
		requiresactivation = false;
	}
	
	367
	{
		title = "Floor Raise by 32 (changes texture)";
		prefix = "SR";
		requiresactivation = false;
	}
	
	368
	{
		title = "Floor Raise to Next Higher Floor (changes texture)";
		prefix = "SR";
		requiresactivation = false;
	}
	
	369
	{
		title = "Floor Raise to Next Higher Floor";
		prefix = "SR";
		requiresactivation = false;
	}
	
	370
	{
		title = "Floor Lower to 8 above Highest Floor";
		prefix = "SR";
		requiresactivation = false;
	}
	
	371
	{
		title = "Floor Lower to 8 above Highest Floor";
		prefix = "S1";
		requiresactivation = false;
	}
	
	382
	{
		title = "Floor Lower to Lowest Floor";
		prefix = "WR";
		requiresactivation = false;
	}
	
	383
	{
		title = "Floor Lower to Highest Floor";
		prefix = "WR";
		requiresactivation = false;
	}
	
	384
	{
		title = "Floor Lower to Lowest Floor (changes texture)";
		prefix = "WR";
		requiresactivation = false;
	}
	
	387
	{
		title = "Floor Start Moving Up and Down";
		prefix = "WR";
		requiresactivation = false;
	}
	
	389
	{
		title = "Floor Stop Moving";
		prefix = "WR";
		requiresactivation = false;
	}
	
	391
	{
		title = "Floor Raise to Lowest Ceiling";
		prefix = "WR";
		requiresactivation = false;
	}
	
	392
	{
		title = "Floor Raise by 24";
		prefix = "WR";
		requiresactivation = false;
	}
	
	393
	{
		title = "Floor Raise by 24 (changes texture)";
		prefix = "WR";
		requiresactivation = false;
	}
	
	394
	{
		title = "Floor Raise to 8 below Lowest Ceiling (crushes)";
		prefix = "WR";
	}
	
	395
	{
		title = "Floor Raise to Next Higher Floor (changes texture)";
		prefix = "WR";
		requiresactivation = false;
	}
	
	396
	{
		title = "Floor Raise by Shortest Lower Texture";
		prefix = "WR";
		requiresactivation = false;
	}
	
	398
	{
		title = "Floor Lower to 8 above Highest Floor";
		prefix = "WR";
	}
	
	401
	{
		title = "Floor Raise to Lowest Ceiling";
		prefix = "S1";
		requiresactivation = false;
	}
	
	402
	{
		title = "Floor Lower to Highest Floor";
		prefix = "S1";
		requiresactivation = false;
	}
	
	419
	{
		title = "Floor Raise to Next Higher Floor";
		prefix = "W1";
		requiresactivation = false;
	}
	
	428
	{
		title = "Floor Raise to Next Higher Floor";
		prefix = "WR";
		requiresactivation = false;
	}
	
	429
	{
		title = "Floor Raise to Next Higher Floor (fast)";
		prefix = "WR";
		requiresactivation = false;
	}
	
	430
	{
		title = "Floor Raise to Next Higher Floor (fast)";
		prefix = "W1";
		requiresactivation = false;
	}
	
	431
	{
		title = "Floor Raise to Next Higher Floor (fast)";
		prefix = "S1";
		requiresactivation = false;
	}
	
	432
	{
		title = "Floor Raise to Next Higher Floor (fast)";
		prefix = "SR";
		requiresactivation = false;
	}
	
	440
	{
		title = "Floor Raise by 512";
		prefix = "S1";
		requiresactivation = false;
	}
}


crusher
{
	title = "Crusher";
	
	306
	{
		title = "Crusher Start with Fast Damage";
		prefix = "W1";
		requiresactivation = false;
	}
	
	325
	{
		title = "Crusher Start with Slow Damage";
		prefix = "W1";
		requiresactivation = false;
	}
	
	357
	{
		title = "Crusher Stop";
		prefix = "W1";
		requiresactivation = false;
	}
	
	373
	{
		title = "Crusher Start with Slow Damage";
		prefix = "WR";
		requiresactivation = false;
	}
	
	374
	{
		title = "Crusher Stop";
		prefix = "WR";
		requiresactivation = false;
	}
	
	377
	{
		title = "Crusher Start with Fast Damage";
		prefix = "WR";
		requiresactivation = false;
	}
	
	441
	{
		title = "Crusher Start with Slow Damage (silent)";
		prefix = "W1";
		requiresactivation = false;
	}
}


stairs
{
	title = "Stairs";
	
	307
	{
		title = "Stairs Raise by 8";
		prefix = "S1";
		requiresactivation = false;
	}
	
	308
	{
		title = "Stairs Raise by 8";
		prefix = "W1";
		requiresactivation = false;
	}
	
	400
	{
		title = "Stairs Raise by 16 (fast)";
		prefix = "W1";
		requiresactivation = false;
	}
	
	427
	{
		title = "Stairs Raise by 16 (fast)";
		prefix = "S1";
		requiresactivation = false;
	}
}


lift
{
	title = "Lift";
	
	310
	{
		title = "Lift Lower Wait Raise";
		prefix = "W1";
		requiresactivation = false;
	}
	
	321
	{
		title = "Lift Lower Wait Raise";
		prefix = "S1";
		requiresactivation = false;
	}
	
	362
	{
		title = "Lift Lower Wait Raise";
		prefix = "SR";
		requiresactivation = false;
	}
	
	388
	{
		title = "Lift Lower Wait Raise";
		prefix = "WR";
		requiresactivation = false;
	}
	
	420
	{
		title = "Lift Lower Wait Raise (fast)";
		prefix = "WR";
		requiresactivation = false;
	}
	
	421
	{
		title = "Lift Lower Wait Raise (fast)";
		prefix = "W1";
		requiresactivation = false;
	}
	
	422
	{
		title = "Lift Lower Wait Raise (fast)";
		prefix = "S1";
		requiresactivation = false;
	}
	
	423
	{
		title = "Lift Lower Wait Raise (fast)";
		prefix = "SR";
		requiresactivation = false;
	}
}


exit
{
	title = "Exit";
	
	311
	{
		title = "Exit Level";
		prefix = "S1";
		requiresactivation = false;
	}
	
	351
	{
		title = "Exit Level (goes to secret level)";
		prefix = "S1";
		requiresactivation = false;
	}
	
	352
	{
		title = "Exit Level";
		prefix = "W1";
		requiresactivation = false;
	}
	
	424
	{
		title = "Exit Level (goes to secret level)";
		prefix = "W1";
		requiresactivation = false;
	}
}


light
{
	title = "Light";
	
	312
	{
		title = "Light Change to Brightest Adjacent";
		prefix = "W1";
		requiresactivation = false;
	}
	
	313
	{
		title = "Light Change to 255";
		prefix = "W1";
		requiresactivation = false;
	}
	
	317
	{
		title = "Light Start Blinking";
		prefix = "W1";
		requiresactivation = false;
	}
	
	335
	{
		title = "Light Change to 35";
		prefix = "W1";
		requiresactivation = false;
	}
	
	379
	{
		title = "Light Change to 35";
		prefix = "WR";
		requiresactivation = false;
	}
	
	380
	{
		title = "Light Change to Brightest Adjacent";
		prefix = "WR";
		requiresactivation = false;
	}
	
	381
	{
		title = "Light Change to 255";
		prefix = "WR";
		requiresactivation = false;
	}
	
	404
	{
		title = "Light Change to Darkest Adjacent";
		prefix = "W1";
		requiresactivation = false;
	}
	
	438
	{
		title = "Light Change to 255";
		prefix = "SR";
		requiresactivation = false;
	}
	
	439
	{
		title = "Light Change to 35";
		prefix = "SR";
		requiresactivation = false;
	}
}


ceiling
{
	title = "Ceiling";
	
	340
	{
		title = "Ceiling Raise to Highest Ceiling";
		prefix = "W1";
		requiresactivation = false;
	}
	
	341
	{
		title = "Ceiling Lower to Floor";
		prefix = "S1";
		requiresactivation = false;
	}
	
	343
	{
		title = "Ceiling Lower to Floor";
		prefix = "SR";
		requiresactivation = false;
	}
	
	344
	{
		title = "Ceiling Lower to 8 above Floor";
		prefix = "W1";
		requiresactivation = false;
	}
	
	349
	{
		title = "Ceiling Lower to 8 above Floor (perpetual slow crusher damage)";
		prefix = "S1";
		requiresactivation = false;
	}
	
	372
	{
		title = "Ceiling Lower to 8 above Floor";
		prefix = "WR";
		requiresactivation = false;
	}
}


scroll
{
	title = "Scroll";
	
	348
	{
		title = "Scroll Texture Left";
		prefix = "";
		requiresactivation = false;
	}
}


teleport
{
	title = "Teleport";
	
	397
	{
		title = "Teleport";
		prefix = "WR";
		requiresactivation = false;
	}
	
	339
	{
		title = "Teleport";
		prefix = "W1";
		requiresactivation = false;
	}
	
	425
	{
		title = "Teleport (monsters only)";
		prefix = "W1";
		requiresactivation = false;
	}
	
	426
	{
		title = "Teleport (monsters only)";
		prefix = "WR";
		requiresactivation = false;
	}
}


door
{
	title = "Door";
	
	475
	{
		title = "Door Close Wait Open (30 seconds)";
		prefix = "S1";
		requiresactivation = false;
	}
	
	496
	{
		title = "Door Close Wait Open (30 seconds)";
		prefix = "SR";
		requiresactivation = false;
	}
}


floor
{
	title = "Floor";
	
	446
	{
		title = "Floor Raise Donut (changes texture)";
		prefix = "W1";
		requiresactivation = false;
	}
	
	455
	{
		title = "Floor Raise Donut (changes texture)";
		prefix = "WR";
		requiresactivation = false;
	}
	
	491
	{
		title = "Floor Raise Donut (changes texture)";
		prefix = "SR";
		requiresactivation = false;
	}
	
	442
	{
		title = "Floor Raise by 512";
		prefix = "W1";
		requiresactivation = false;
	}
	
	447
	{
		title = "Floor Raise by 512";
		prefix = "WR";
		requiresactivation = false;
	}
	
	458
	{
		title = "Floor Raise by Shortest Lower Texture";
		prefix = "S1";
		requiresactivation = false;
	}
	
	459
	{
		title = "Floor Lower to Lowest Floor (changes texture)";
		prefix = "S1";
		requiresactivation = false;
	}
	
	460
	{
		title = "Floor Raise by 24 (changes texture and effect)";
		prefix = "S1";
		requiresactivation = false;
	}
	
	461
	{
		title = "Floor Raise by 24";
		prefix = "S1";
		requiresactivation = false;
	}
	
	476
	{
		title = "Floor Raise by Shortest Lower Texture";
		prefix = "SR";
		requiresactivation = false;
	}
	
	477
	{
		title = "Floor Lower to Lowest Floor (changes texture)";
		prefix = "SR";
		requiresactivation = false;
	}
	
	478
	{
		title = "Floor Raise by 512";
		prefix = "SR";
		requiresactivation = false;
	}
	
	479
	{
		title = "Floor Raise by 24 (changes texture and effect)";
		prefix = "SR";
		requiresactivation = false;
	}
	
	480
	{
		title = "Floor Raise by 24";
		prefix = "SR";
		requiresactivation = false;
	}
	
	513
	{
		title = "Change Floor Brightness to this Brightness";
		id = "Boom_Transfer_FloorLight";
		prefix = "";
		requiresactivation = false;
	}
	
	519
	{
		title = "Floor Lower to Nearest Floor";
		prefix = "W1";
		requiresactivation = false;
	}
	
	520
	{
		title = "Floor Lower to Nearest Floor";
		prefix = "WR";
		requiresactivation = false;
	}
	
	521
	{
		title = "Floor Lower to Nearest Floor";
		prefix = "S1";
		requiresactivation = false;
	}
	
	522
	{
		title = "Floor Lower to Nearest Floor";
		prefix = "SR";
		requiresactivation = false;
	}
}


crusher
{
	title = "Crusher";
	
	450
	{
		title = "Crusher Start (silent)";
		prefix = "WR";
		requiresactivation = false;
	}
	
	464
	{
		title = "Crusher Start (fast)";
		prefix = "S1";
		requiresactivation = false;
	}
	
	465
	{
		title = "Crusher Start (silent)";
		prefix = "S1";
		requiresactivation = false;
	}
	
	468
	{
		title = "Crusher Stop";
		prefix = "S1";
		requiresactivation = false;
	}
	
	483
	{
		title = "Crusher Start (fast)";
		prefix = "SR";
		requiresactivation = false;
	}
	
	484
	{
		title = "Crusher Start";
		prefix = "SR";
		requiresactivation = false;
	}
	
	485
	{
		title = "Crusher Start (silent)";
		prefix = "SR";
		requiresactivation = false;
	}
	
	488
	{
		title = "Crusher Stop";
		prefix = "SR";
		requiresactivation = false;
	}
}


stairs
{
	title = "Stairs";
	
	556
	{
		title = "Stairs Raise by 8";
		prefix = "WR";
		requiresactivation = false;
	}
	
	557
	{
		title = "Stairs Raise by 16 (fast)";
		prefix = "WR";
		requiresactivation = false;
	}
	
	558
	{
		title = "Stairs Raise by 8";
		prefix = "SR";
		requiresactivation = false;
	}
	
	559
	{
		title = "Stairs Raise by 16 (fast)";
		prefix = "SR";
		requiresactivation = false;
	}
}


lift
{
	title = "Lift";
	
	443
	{
		title = "Lift Raise by 24 (changes texture)";
		prefix = "W1";
		requiresactivation = false;
	}
	
	444
	{
		title = "Lift Raise by 32 (changes texture)";
		prefix = "W1";
		requiresactivation = false;
	}
	
	448
	{
		title = "Lift Raise by 24 (changes texture)";
		prefix = "WR";
		requiresactivation = false;
	}
	
	449
	{
		title = "Lift Raise by 32 (changes texture)";
		prefix = "WR";
		requiresactivation = false;
	}
	
	462
	{
		title = "Lift Perpetual Lowest and Highest Floors";
		prefix = "S1";
		requiresactivation = false;
	}
	
	463
	{
		title = "Lift Stop";
		prefix = "S1";
		requiresactivation = false;
	}
	
	481
	{
		title = "Lift Perpetual Lowest and Highest Floors";
		prefix = "SR";
		requiresactivation = false;
	}
	
	482
	{
		title = "Lift Stop";
		prefix = "SR";
		requiresactivation = false;
	}
	
	511
	{
		title = "Lift Raise to Ceiling (instantly)";
		prefix = "SR";
		requiresactivation = false;
	}
	
	512
	{
		title = "Lift Raise to Ceiling (instantly)";
		prefix = "WR";
		requiresactivation = false;
	}
	
	527
	{
		title = "Lift Raise to Next Highest Floor (fast)";
		prefix = "W1";
		requiresactivation = false;
	}
	
	528
	{
		title = "Lift Raise to Next Highest Floor (fast)";
		prefix = "WR";
		requiresactivation = false;
	}
	
	529
	{
		title = "Lift Raise to Next Highest Floor (fast)";
		prefix = "S1";
		requiresactivation = false;
	}
	
	530
	{
		title = "Lift Raise to Next Highest Floor (fast)";
		prefix = "SR";
		requiresactivation = false;
	}
	
	531
	{
		title = "Lift Lower to Next Lowest Floor (fast)";
		prefix = "W1";
		requiresactivation = false;
	}
	
	532
	{
		title = "Lift Lower to Next Lowest Floor (fast)";
		prefix = "WR";
		requiresactivation = false;
	}
	
	533
	{
		title = "Lift Lower to Next Lowest Floor (fast)";
		prefix = "S1";
		requiresactivation = false;
	}
	
	534
	{
		title = "Lift Lower to Next Lowest Floor (fast)";
		prefix = "SR";
		requiresactivation = false;
	}
	
	535
	{
		title = "Lift Move to Same Floor Height (fast)";
		prefix = "W1";
		requiresactivation = false;
	}
	
	536
	{
		title = "Lift Move to Same Floor Height (fast)";
		prefix = "WR";
		requiresactivation = false;
	}
	
	537
	{
		title = "Lift Move to Same Floor Height (fast)";
		prefix = "S1";
		requiresactivation = false;
	}
	
	538
	{
		title = "Lift Move to Same Floor Height (fast)";
		prefix = "SR";
		requiresactivation = false;
	}
}


exit
{
	title = "Exit";
	
	497
	{
		title = "Exit Level";
		prefix = "G1";
		requiresactivation = false;
	}
	
	498
	{
		title = "Exit Level (goes to secret level)";
		prefix = "G1";
		requiresactivation = false;
	}
}


light
{
	title = "Light";
	
	456
	{
		title = "Light Start Blinking";
		prefix = "WR";
		requiresactivation = false;
	}
	
	457
	{
		title = "Light Change to Darkest Adjacent";
		prefix = "WR";
		requiresactivation = false;
	}
	
	469
	{
		title = "Light Change to Brightest Adjacent";
		prefix = "S1";
		requiresactivation = false;
	}
	
	470
	{
		title = "Light Change to 35";
		prefix = "S1";
		requiresactivation = false;
	}
	
	471
	{
		title = "Light Change to 255";
		prefix = "S1";
		requiresactivation = false;
	}
	
	472
	{
		title = "Light Start Blinking";
		prefix = "S1";
		requiresactivation = false;
	}
	
	473
	{
		title = "Light Change to Darkest Adjacent";
		prefix = "S1";
		requiresactivation = false;
	}
	
	492
	{
		title = "Light Change to Brightest Adjacent";
		prefix = "SR";
		requiresactivation = false;
	}
	
	493
	{
		title = "Light Start Blinking";
		prefix = "SR";
		requiresactivation = false;
	}
	
	494
	{
		title = "Light Change to Darkest Adjacent";
		prefix = "SR";
		requiresactivation = false;
	}
}


teleport
{
	title = "Teleport";
	
	474
	{
		title = "Teleport (also monsters)";
		prefix = "S1";
		requiresactivation = false;
	}
	
	495
	{
		title = "Teleport (also monsters)";
		prefix = "SR";
		requiresactivation = false;
	}
	
	507
	{
		title = "Teleport (also monsters, silent, same angle)";
		prefix = "W1";
		requiresactivation = false;
	}
	
	508
	{
		title = "Teleport (also monsters, silent, same angle)";
		prefix = "WR";
		requiresactivation = false;
	}
	
	509
	{
		title = "Teleport (also monsters, silent, same angle)";
		prefix = "S1";
		requiresactivation = false;
	}
	
	510
	{
		title = "Teleport (also monsters, silent, same angle)";
		prefix = "SR";
		requiresactivation = false;
	}
	
	543
	{
		title = "Teleport to Line With Same Tag (silent, same angle)";
		prefix = "W1";
		requiresactivation = false;
	}
	
	544
	{
		title = "Teleport to Line With Same Tag (silent, same angle)";
		prefix = "WR";
		requiresactivation = false;
	}
	
	562
	{
		title = "Teleport to Line With Same Tag (silent, reversed angle)";
		prefix = "W1";
		requiresactivation = false;
	}
	
	563
	{
		title = "Teleport to Line With Same Tag (silent, reversed angle)";
		prefix = "WR";
		requiresactivation = false;
	}
	
	564
	{
		title = "Teleport to Line With Same Tag (also monsters, silent, reversed angle)";
		prefix = "W1";
		requiresactivation = false;
	}
	
	565
	{
		title = "Teleport to Line With Same Tag (also monsters, reversed angle)";
		prefix = "WR";
		requiresactivation = false;
	}
	
	566
	{
		title = "Teleport to Line With Same Tag (monsters only, silent)";
		prefix = "W1";
		requiresactivation = false;
	}
	
	567
	{
		title = "Teleport to Line With Same Tag (monsters only, silent)";
		prefix = "WR";
		requiresactivation = false;
	}
	
	568
	{
		title = "Teleport (monsters only, silent)";
		prefix = "W1";
		requiresactivation = false;
	}
	
	569
	{
		title = "Teleport (monsters only, silent)";
		prefix = "WR";
		requiresactivation = false;
	}
}


ceiling
{
	title = "Ceiling";
	
	445
	{
		title = "Ceiling Lower to Floor (fast)";
		prefix = "W1";
		requiresactivation = false;
	}
	
	451
	{
		title = "Ceiling Raise to Highest Ceiling";
		prefix = "WR";
		requiresactivation = false;
	}
	
	452
	{
		title = "Ceiling Lower to Floor (fast)";
		prefix = "WR";
		requiresactivation = false;
	}
	
	466
	{
		title = "Ceiling Raise to Highest Ceiling";
		prefix = "S1";
		requiresactivation = false;
	}
	
	467
	{
		title = "Ceiling Lower to 8 Above Floor";
		prefix = "S1";
		requiresactivation = false;
	}
	
	486
	{
		title = "Ceiling Raise to Highest Ceiling";
		prefix = "SR";
		requiresactivation = false;
	}
	
	487
	{
		title = "Ceiling Lower to 8 Above Floor";
		prefix = "SR";
		requiresactivation = false;
	}
	
	499
	{
		title = "Ceiling Lower to Lowest Ceiling";
		prefix = "W1";
		requiresactivation = false;
	}
	
	500
	{
		title = "Ceiling Lower to Highest Floor";
		prefix = "W1";
		requiresactivation = false;
	}
	
	501
	{
		title = "Ceiling Lower to Lowest Ceiling";
		prefix = "WR";
		requiresactivation = false;
	}
	
	502
	{
		title = "Ceiling Lower to Highest Floor";
		prefix = "WR";
		requiresactivation = false;
	}
	
	503
	{
		title = "Ceiling Lower to Lowest Ceiling";
		prefix = "S1";
		requiresactivation = false;
	}
	
	504
	{
		title = "Ceiling Lower to Highest Floor";
		prefix = "S1";
		requiresactivation = false;
	}
	
	505
	{
		title = "Ceiling Lower to Lowest Ceiling";
		prefix = "SR";
		requiresactivation = false;
	}
	
	506
	{
		title = "Ceiling Lower to Highest Floor";
		prefix = "SR";
		requiresactivation = false;
	}
	
	561
	{
		title = "Change Ceiling Brightness to this Brightness";
		id = "Boom_Transfer_CeilingLight";
		prefix = "";
		requiresactivation = false;
	}
}


scroll
{
	title = "Scroll";
	
	385
	{
		title = "Scroll Texture Right";
		prefix = "";
		requiresactivation = false;
	}
	
	514
	{
		title = "Scroll Ceiling Accelerates when Sector Changes Height";
		prefix = "";
		requiresactivation = false;
	}
	
	515
	{
		title = "Scroll Floor Accelerates when Sector Changes Height";
		prefix = "";
		requiresactivation = false;
	}
	
	516
	{
		title = "Scroll Things Accelerates when Sector Changes Height";
		prefix = "";
		requiresactivation = false;
	}
	
	517
	{
		title = "Scroll Floor/Things Accelerates when Sector Changes Height";
		prefix = "";
		requiresactivation = false;
	}
	
	518
	{
		title = "Scroll Wall Accelerates when Sector Changes Height";
		prefix = "";
		requiresactivation = false;
	}
	
	545
	{
		title = "Scroll Ceiling when Sector Changes Height";
		prefix = "";
		requiresactivation = false;
	}
	
	546
	{
		title = "Scroll Floor when Sector Changes Height";
		prefix = "";
		requiresactivation = false;
	}
	
	547
	{
		title = "Scroll Move Things when Sector Changes Height";
		prefix = "";
		requiresactivation = false;
	}
	
	548
	{
		title = "Scroll Floor/Move Things when Sector Changes Height";
		prefix = "";
		requiresactivation = false;
	}
	
	549
	{
		title = "Scroll Wall when Sector Changes Height";
		prefix = "";
		requiresactivation = false;
	}
	
	550
	{
		title = "Scroll Ceiling according to Line Vector";
		prefix = "";
		requiresactivation = false;
	}
	
	551
	{
		title = "Scroll Floor according to Line Vector";
		prefix = "";
		requiresactivation = false;
	}
	
	552
	{
		title = "Scroll Move Things according to Line Vector";
		prefix = "";
		requiresactivation = false;
	}
	
	553
	{
		title = "Scroll Floor, Move Things";
		prefix = "";
		requiresactivation = false;
	}
	
	554
	{
		title = "Scroll Wall according to Line Vector";
		prefix = "";
		requiresactivation = false;
	}
	
	555
	{
		title = "Scroll Wall using Sidedef Offsets";
		prefix = "";
		requiresactivation = false;
	}
}


change
{
	title = "Change";
	
	78
	{
		title = "Change Texture and Effect to Nearest";
		prefix = "SR";
		requiresactivation = false;
	}
	
	453
	{
		title = "Change Texture And Effect";
		prefix = "W1";
		requiresactivation = false;
	}
	
	454
	{
		title = "Change Texture And Effect";
		prefix = "WR";
		requiresactivation = false;
	}
	
	489
	{
		title = "Change Texture And Effect";
		prefix = "S1";
		requiresactivation = false;
	}
	
	490
	{
		title = "Change Texture And Effect";
		prefix = "SR";
		requiresactivation = false;
	}
	
	539
	{
		title = "Change Texture and Effect to Nearest";
		prefix = "W1";
		requiresactivation = false;
	}
	
	540
	{
		title = "Change Texture and Effect to Nearest";
		prefix = "WR";
		requiresactivation = false;
	}
	
	541
	{
		title = "Change Texture and Effect to Nearest";
		prefix = "S1";
		requiresactivation = false;
	}
}


friction
{
	title = "Friction";
	
	523
	{
		title = "Friction Tagged Sector: Drag < 100, Slide > 100";
		prefix = "";
		requiresactivation = false;
	}
}


wind
{
	title = "Wind";
	
	524
	{
		title = "Wind according to Line Vector";
		prefix = "";
		requiresactivation = false;
	}
}


current
{
	title = "Current";
	
	525
	{
		title = "Current according to Line Vector";
		prefix = "";
		requiresactivation = false;
	}
}


wind/current
{
	title = "Wind/Current";
	
	526
	{
		title = "Wind/Current by Push/Pull Thing In Sector";
		prefix = "";
		requiresactivation = false;
	}
}


create
{
	title = "Create";
	
	542
	{
		title = "Create Fake Ceiling and Floor";
		prefix = "";
		requiresactivation = false;
	}
}


translucent
{
	title = "Translucent";
	
	560
	{
		title = "Translucent (Middle Texture)";
		prefix = "";
		requiresactivation = false;
	}
}


transfer
{
	title = "Transfer";
	
	571
	{
		title = "Transfer Sky Texture to Tagged Sectors";
		prefix = "";
		requiresactivation = false;
	}
	
	572
	{
		title = "Transfer Sky Texture to Tagged Sectors (flipped)";
		prefix = "";
		requiresactivation = false;
	}
}

scroll
{
	title = "Scroll";
	
	573
	{
		title = "Scroll Texture Up";
		prefix = "";
		requiresactivation = false;
	}

	574
	{
		title = "Scroll Texture Down";
		prefix = "";
		requiresactivation = false;
	}
	
	575
	{
		title = "Scroll Texture Left (fast)";
		prefix = "";
		requiresactivation = false;
	}

	576
	{
		title = "Scroll Texture Right (fast)";
		prefix = "";
		requiresactivation = false;
	}

	577
	{
		title = "Scroll Texture Up (fast)";
		prefix = "";
		requiresactivation = false;
	}

	578
	{
		title = "Scroll Texture Down (fast)";
		prefix = "";
		requiresactivation = false;
	}

	1024
	{
		title = "Scroll tagged Wall using sidedef offsets (/8)";
		prefix = "";
		requiresactivation = false;
	}

	1025
	{
		title = "Scroll tagged Wall when Sector Changes Height (/8)";
		prefix = "";
		requiresactivation = false;
	}

	1026
	{
		title = "Scroll tagged Wall Accelerates when Sector Changes Height (/8)";
		prefix = "";
		requiresactivation = false;
	}
}

ripple
{	
	title = "Ripple";
	579
	{
		title = "Ripple Tagged Sector Floor";
		prefix = "";
		requiresactivation = false;
	}
	
	580
	{
		title = "Ripple Tagged Sector Ceiling";
		prefix = "";
		requiresactivation = false;
	}

}

3dFloors
{
	title = "3dFloor";
	581
	{
		title = "3d Floor Tagged Sector";
		prefix = "";
		requiresactivation = false;
	}
	
}

ladder
{
	title = "Ladder";
	582
	{
		title = "Ladder Tagged Sector";
		prefix = "";
		requiresactivation = false;
	}
	
}

rotate
{
	title = "Flat Rotation";
	584
	{
		title = "Rotate Tagged Sector Floor";
		prefix = "";
		requiresactivation = false;
	}

	585
	{
		title = "Rotate Tagged Sector Ceiling";
		prefix = "";
		requiresactivation = false;
	}
	
}

flatoffset
{
	title = "Flat Offsets";
	591
	{
		title = "Offset tagged floor texture to vector";
		prefix = "";
		requiresactivation = false;
	}

	592
	{
		title = "Offset tagged ceiling texture to vector";
		prefix = "";
		requiresactivation = false;
	}
}

slopes
{
	title = "Slopes";
	
	686
	{
		title = "Slope FrontSector Floor To Back/Tagged Sector Height";
		prefix = "";
		requiresactivation = false;
	}
	
	687
	{
		title = "Slope FrontSector Ceiling To Back/Tagged Sector Height";
		prefix = "";
		requiresactivation = false;
	}
	
	688
	{
		title = "Slope FrontSector Floor And Ceiling Back/Tagged Sector Height";
		prefix = "";
		requiresactivation = false;
	}
	
	689
	{
		title = "Slope BackSector Floor To Front/Tagged Sector Height";
		prefix = "";
		requiresactivation = false;
	}
	
	690
	{
		title = "Slope BackSector Ceiling To Front/Tagged Sector Height";
		prefix = "";
		requiresactivation = false;
	}
	
	691
	{
		title = "Slope BackSector Floor And Ceiling To Front/Tagged Sector Height";
		prefix = "";
		requiresactivation = false;
	}

	583
	{
		title = "Slippery on slope descent";
		prefix = "";
		requiresactivation = false;
	}
}

polyobj
{
	title = "Polyobjects";
	
	1
	{
		title = "Polyobject Start Line";
		id = "Polyobj_StartLine";
		requiresactivation = false;
		
		arg0
		{
			title = "Polyobject Number";
			type = 25;
		}
		
		arg1
		{
			title = "Mirror Polyobject Number";
			type = 25;
		}
		
		arg2
		{
			title = "Sound Number";
		}
	}
	
	2
	{
		title = "Polyobject Rotate Left";
		id = "Polyobj_RotateLeft";
		
		arg0
		{
			title = "Polyobject Number";
			type = 25;
		}
		
		arg1
		{
			title = "Rotation Speed";
			type = 11;
			enum = "stair_speeds";
			default = 16;
		}
		
		arg2
		{
			title = "Target Angle";
			type = 11;
			enum = "polyobj_angles";
		}
	}
	
	3
	{
		title = "Polyobject Rotate Right";
		id = "Polyobj_RotateRight";
		
		arg0
		{
			title = "Polyobject Number";
			type = 25;
		}
		
		arg1
		{
			title = "Rotation Speed";
			type = 11;
			enum = "stair_speeds";
			default = 16;
		}
		
		arg2
		{
			title = "Target Angle";
			type = 11;
			enum = "polyobj_angles";
		}
	}
	
	4
	{
		title = "Polyobject Move";
		id = "Polyobj_Move";
		
		arg0
		{
			title = "Polyobject Number";
			type = 25;
		}
		
		arg1
		{
			title = "Movement Speed";
			type = 11;
			enum = "stair_speeds";
			default = 16;
		}
		
		arg2
		{
			title = "Movement Angle";
			type = 22;
		}
		
		arg3
		{
			title = "Movement Distance";
			default = 64;
		}
	}
	
	5
	{
		title = "Polyobject Explicit Line";
		id = "Polyobj_ExplicitLine";
		requiresactivation = false;
		
		arg0
		{
			title = "Polyobject Number";
			type = 25;
		}
		
		arg1
		{
			title = "Rendering order";
		}
		
		arg2
		{
			title = "Mirror Polyobject Number";
			type = 25;
		}
		
		arg3
		{
			title = "Sound Number";
		}
	}
	
	6
	{
		title = "Polyobject Move (* 8)";
		id = "Polyobj_MoveTimes8";
		
		arg0
		{
			title = "Polyobject Number";
			type = 25;
		}
		
		arg1
		{
			title = "Movement Speed";
			type = 11;
			enum = "stair_speeds";
			default = 16;
		}
		
		arg2
		{
			title = "Movement Angle";
			type = 22;
		}
		
		arg3
		{
			title = "Movement Dist. * 8";
			default = 8;
		}
	}
	
	7
	{
		title = "Polyobject Door Swing";
		id = "Polyobj_DoorSwing";
		
		arg0
		{
			title = "Polyobject Number";
			type = 25;
		}
		
		arg1
		{
			title = "Movement Speed";
			type = 11;
			enum = "polyobj_speeds";
			default = 16;
		}
		
		arg2
		{
			title = "Movement Angle";
			type = 22;
		}
		
		arg3
		{
			title = "Delay (tics)";
			type = 11;
			enum = "delay_tics";
			default = 105;
		}
	}
	
	8
	{
		title = "Polyobject Door Slide";
		id = "Polyobj_DoorSlide";
		
		arg0
		{
			title = "Polyobject Number";
			type = 25;
		}
		
		arg1
		{
			title = "Movement Speed";
			type = 11;
			enum = "stair_speeds";
			default = 16;
		}
		
		arg2
		{
			title = "Movement Angle";
			type = 22;
		}
		
		arg3
		{
			title = "Movement Distance";
			default = 64;
		}
		
		arg4
		{
			title = "Delay";
			type = 11;
			enum = "delay_tics";
			default = 105;
		}
	}
	
	90
	{
		title = "Polyobject Rotate Left (override)";
		id = "Polyobj_OR_RotateLeft";
		
		arg0
		{
			title = "Polyobject Number";
			type = 25;
		}
		
		arg1
		{
			title = "Rotation Speed";
			type = 11;
			enum = "stair_speeds";
			default = 16;
		}
		
		arg2
		{
			title = "Target Angle";
			type = 11;
			enum = "polyobj_angles";
		}
	}
	
	91
	{
		title = "Polyobject Rotate Right (override)";
		id = "Polyobj_OR_RotateRight";
		
		arg0
		{
			title = "Polyobject Number";
			type = 25;
		}
		
		arg1
		{
			title = "Rotation Speed";
			type = 11;
			enum = "stair_speeds";
			default = 16;
		}
		
		arg2
		{
			title = "Target Angle";
			type = 11;
			enum = "polyobj_angles";
		}
	}
	
	92
	{
		title = "Polyobject Move (override)";
		id = "Polyobj_OR_Move";
		
		arg0
		{
			title = "Polyobject Number";
			type = 25;
		}
		
		arg1
		{
			title = "Movement Speed";
			type = 11;
			enum = "stair_speeds";
			default = 16;
		}
		
		arg2
		{
			title = "Movement Angle";
			type = 22;
		}
		
		arg3
		{
			title = "Movement Distance";
			default = 64;
		}
	}
	
	93
	{
		title = "Polyobject Move (8mu, override)";
		id = "Polyobj_OR_MoveTimes8";
		
		arg0
		{
			title = "Polyobject Number";
			type = 25;
		}
		
		arg1
		{
			title = "Movement Speed";
			type = 11;
			enum = "stair_speeds";
			default = 16;
		}
		
		arg2
		{
			title = "Movement Angle";
			type = 22;
		}
		
		arg3
		{
			title = "Movement Distance * 8";
			default = 8;
		}
	}
}


line
{
	title = "Line";
	
	121
	{
		title = "Line Identification";
		id = "Line_SetIdentification";
		
		arg0
		{
			title = "Line ID";
		}
	}
}


dooru
{
	title = "Door (UDMF)";
	
	10
	{
		title = "Door Close";
		id = "Door_Close";
		
		arg0
		{
			title = "Sector Tag";
			type = 13;
		}
		
		arg1
		{
			title = "Movement Speed";
			type = 11;
			enum = "door_speeds";
			default = 16;
		}
		
		arg2
		{
			title = "Light Tag";
			type = 13;
		}
	}
	
	11
	{
		title = "Door Open";
		id = "Door_Open";
		
		arg0
		{
			title = "Sector Tag";
			type = 13;
		}
		
		arg1
		{
			title = "Movement Speed";
			type = 11;
			enum = "door_speeds";
			default = 16;
		}
		
		arg2
		{
			title = "Light Tag";
			type = 13;
		}
	}
	
	12
	{
		title = "Door Raise";
		id = "Door_Raise";
		
		arg0
		{
			title = "Sector Tag";
			type = 13;
		}
		
		arg1
		{
			title = "Movement Speed";
			type = 11;
			enum = "door_speeds";
			default = 16;
		}
		
		arg2
		{
			title = "Close Delay";
			type = 11;
			enum = "reset_tics";
			default = 150;
		}
		
		arg3
		{
			title = "Light Tag";
			type = 13;
		}
	}
	
	13
	{
		title = "Door Locked Raise";
		id = "Door_LockedRaise";
		
		arg0
		{
			title = "Sector Tag";
			type = 13;
		}
		
		arg1
		{
			title = "Movement Speed";
			type = 11;
			enum = "door_speeds";
			default = 16;
		}
		
		arg2
		{
			title = "Close Delay";
			type = 11;
			enum = "reset_tics";
			default = 150;
		}
		
		arg3
		{
			title = "Key Number";
			type = 11;
			enum = "keys";
		}
		
		arg4
		{
			title = "Light Tag";
			type = 13;
		}
	}
}


flooru
{
	title = "Floor (UDMF)";
	
	20
	{
		title = "Floor Lower by Value";
		id = "Floor_LowerByValue";
		
		arg0
		{
			title = "Sector Tag";
			type = 13;
		}
		
		arg1
		{
			title = "Movement Speed";
			type = 11;
			enum = "flat_speeds";
			default = 16;
		}
		
		arg2
		{
			title = "Lower by";
		}
	}
	
	21
	{
		title = "Floor Lower to Lowest Floor";
		id = "Floor_LowerToLowest";
		
		arg0
		{
			title = "Sector Tag";
			type = 13;
		}
		
		arg1
		{
			title = "Movement Speed";
			type = 11;
			enum = "flat_speeds";
			default = 16;
		}
	}
	
	22
	{
		title = "Floor Lower to Nearest Floor";
		id = "Floor_LowerToNearest";
		
		arg0
		{
			title = "Sector Tag";
			type = 13;
		}
		
		arg1
		{
			title = "Movement Speed";
			type = 11;
			enum = "flat_speeds";
			default = 16;
		}
	}
	
	23
	{
		title = "Floor Raise by Value";
		id = "Floor_RaiseByValue";
		
		arg0
		{
			title = "Sector Tag";
			type = 13;
		}
		
		arg1
		{
			title = "Movement Speed";
			type = 11;
			enum = "flat_speeds";
			default = 16;
		}
		
		arg2
		{
			title = "Raise by";
		}
	}
	
	24
	{
		title = "Floor Raise to Highest Floor";
		id = "Floor_RaiseToHighest";
		
		arg0
		{
			title = "Sector Tag";
			type = 13;
		}
		
		arg1
		{
			title = "Movement Speed";
			type = 11;
			enum = "flat_speeds";
			default = 16;
		}
	}
	
	25
	{
		title = "Floor Raise to Nearest Floor";
		id = "Floor_RaiseToNearest";
		
		arg0
		{
			title = "Sector Tag";
			type = 13;
		}
		
		arg1
		{
			title = "Movement Speed";
			type = 11;
			enum = "flat_speeds";
			default = 16;
		}
	}
	
	28
	{
		title = "Floor Crusher Start";
		id = "Floor_RaiseAndCrush";
		
		arg0
		{
			title = "Sector Tag";
			type = 13;
		}
		
		arg1
		{
			title = "Movement Speed";
			type = 11;
			enum = "flat_speeds";
			default = 16;
		}
		
		arg2
		{
			title = "Crush Damage";
			default = 100;
		}
	}
	
	35
	{
		title = "Floor Raise by Value * 8";
		id = "Floor_RaiseByValueTimes8";
		
		arg0
		{
			title = "Sector Tag";
			type = 13;
		}
		
		arg1
		{
			title = "Movement Speed";
			type = 11;
			enum = "flat_speeds";
			default = 16;
		}
		
		arg2
		{
			title = "Raise by (* 8)";
		}
	}
	
	36
	{
		title = "Floor Lower by Value * 8";
		id = "Floor_LowerByValueTimes8";
		
		arg0
		{
			title = "Sector Tag";
			type = 13;
		}
		
		arg1
		{
			title = "Movement Speed";
			type = 11;
			enum = "flat_speeds";
			default = 16;
		}
		
		arg2
		{
			title = "Lower by (* 8)";
		}
	}
	
	46
	{
		title = "Floor Crusher Stop";
		id = "Floor_CrushStop";
		
		arg0
		{
			title = "Sector Tag";
			type = 13;
		}
	}
	
	66
	{
		title = "Floor Lower Instantly by Value * 8";
		id = "Floor_LowerInstant";
		
		arg0
		{
			title = "Sector Tag";
			type = 13;
		}
		
		arg2
		{
			title = "Lower by (* 8)";
		}
	}
	
	67
	{
		title = "Floor Raise Instantly by Value * 8";
		id = "Floor_RaiseInstant";
		
		arg0
		{
			title = "Sector Tag";
			type = 13;
		}
		
		arg2
		{
			title = "Raise by (* 8)";
		}
	}
	
	68
	{
		title = "Floor Move to Value * 8";
		id = "Floor_MoveToValueTimes8";
		
		arg0
		{
			title = "Sector Tag";
			type = 13;
		}
		
		arg1
		{
			title = "Movement Speed";
			type = 11;
			enum = "flat_speeds";
			default = 16;
		}
		
		arg2
		{
			title = "Target Height * 8";
		}
		
		arg3
		{
			title = "Negative Height";
			type = 11;
			enum = "noyes";
		}
	}
	
	95
	{
		title = "Floor and Ceiling Lower by Value";
		id = "FloorAndCeiling_LowerByValue";
		
		arg0
		{
			title = "Sector Tag";
			type = 13;
		}
		
		arg1
		{
			title = "Movement Speed";
			type = 11;
			enum = "flat_speeds";
			default = 16;
		}
		
		arg2
		{
			title = "Lower by";
		}
	}
	
	96
	{
		title = "Floor and Ceiling Raise by Value";
		id = "FloorAndCeiling_RaiseByValue";
		
		arg0
		{
			title = "Sector Tag";
			type = 13;
		}
		
		arg1
		{
			title = "Movement Speed";
			type = 11;
			enum = "flat_speeds";
			default = 16;
		}
		
		arg2
		{
			title = "Raise by";
		}
	}
}


stairsu
{
	title = "Stairs (UDMF)";
	
	26
	{
		title = "Stairs Build Down";
		id = "Stairs_BuildDown";
		
		arg0
		{
			title = "Sector Tag";
			type = 13;
		}
		
		arg1
		{
			title = "Movement Speed";
			type = 11;
			enum = "stair_speeds";
			default = 4;
		}
		
		arg2
		{
			title = "Step Height";
			default = 16;
		}
		
		arg3
		{
			title = "Build Step Delay";
			type = 11;
			enum = "delay_tics";
			default = 35;
		}
		
		arg4
		{
			title = "Reset Delay";
			type = 11;
			enum = "reset_tics";
		}
	}
	
	27
	{
		title = "Stairs Build Up";
		id = "Stairs_BuildUp";
		
		arg0
		{
			title = "Sector Tag";
			type = 13;
		}
		
		arg1
		{
			title = "Movement Speed";
			type = 11;
			enum = "stair_speeds";
			default = 4;
		}
		
		arg2
		{
			title = "Step Height";
			default = 16;
		}
		
		arg3
		{
			title = "Build Step Delay";
			type = 11;
			enum = "delay_tics";
			default = 35;
		}
		
		arg4
		{
			title = "Reset Delay";
			type = 11;
			enum = "reset_tics";
		}
	}
	
	31
	{
		title = "Stairs Build Down (sync)";
		id = "Stairs_BuildDownSync";
		
		arg0
		{
			title = "Sector Tag";
			type = 13;
		}
		
		arg1
		{
			title = "Movement Speed";
			type = 11;
			enum = "stair_speeds";
			default = 4;
		}
		
		arg2
		{
			title = "Step Height";
			default = 16;
		}
		
		arg3
		{
			title = "Reset Delay";
			type = 11;
			enum = "reset_tics";
		}
	}
	
	32
	{
		title = "Stairs Build Up (sync)";
		id = "Stairs_BuildUpSync";
		
		arg0
		{
			title = "Sector Tag";
			type = 13;
		}
		
		arg1
		{
			title = "Movement Speed";
			type = 11;
			enum = "stair_speeds";
			default = 4;
		}
		
		arg2
		{
			title = "Step Height";
			default = 16;
		}
		
		arg3
		{
			title = "Reset Delay";
			type = 11;
			enum = "reset_tics";
		}
	}
}


pillaru
{
	title = "Pillar (UDMF)";
	
	29
	{
		title = "Pillar Build";
		id = "Pillar_Build";
		
		arg0
		{
			title = "Sector Tag";
			type = 13;
		}
		
		arg1
		{
			title = "Movement Speed";
			type = 11;
			enum = "plat_speeds";
			default = 16;
		}
		
		arg2
		{
			title = "Target Height (rel.)";
		}
	}
	
	30
	{
		title = "Pillar Open";
		id = "Pillar_Open";
		
		arg0
		{
			title = "Sector Tag";
			type = 13;
		}
		
		arg1
		{
			title = "Movement Speed";
			type = 11;
			enum = "plat_speeds";
			default = 16;
		}
		
		arg2
		{
			title = "Lower Floor by";
		}
		
		arg3
		{
			title = "Raise Ceiling by";
		}
	}
	
	94
	{
		title = "Pillar Build and Crush";
		id = "Pillar_BuildAndCrush";
		
		arg0
		{
			title = "Sector Tag";
			type = 13;
		}
		
		arg1
		{
			title = "Movement Speed";
			type = 11;
			enum = "plat_speeds";
			default = 16;
		}
		
		arg2
		{
			title = "Movement Amount";
		}
	}
}


ceilingu
{
	title = "Ceiling (UDMF)";
	
	40
	{
		title = "Ceiling Lower by Value";
		id = "Ceiling_LowerByValue";
		
		arg0
		{
			title = "Sector Tag";
			type = 13;
		}
		
		arg1
		{
			title = "Movement Speed";
			type = 11;
			enum = "plat_speeds";
			default = 16;
		}
		
		arg2
		{
			title = "Lower by";
			default = 64;
		}
	}
	
	41
	{
		title = "Ceiling Raise by Value";
		id = "Ceiling_RaiseByValue";
		
		arg0
		{
			title = "Sector Tag";
			type = 13;
		}
		
		arg1
		{
			title = "Movement Speed";
			type = 11;
			enum = "plat_speeds";
			default = 16;
		}
		
		arg2
		{
			title = "Raise by";
			default = 64;
		}
	}
	
	42
	{
		title = "Ceiling Crusher Start";
		id = "Ceiling_CrushAndRaise";
		
		arg0
		{
			title = "Sector Tag";
			type = 13;
		}
		
		arg1
		{
			title = "Movement Speed";
			type = 11;
			enum = "plat_speeds";
			default = 16;
		}
		
		arg2
		{
			title = "Crush Damage";
			default = 100;
		}
	}
	
	43
	{
		title = "Ceiling Crush Once";
		id = "Ceiling_LowerAndCrush";
		
		arg0
		{
			title = "Sector Tag";
			type = 13;
		}
		
		arg1
		{
			title = "Movement Speed";
			type = 11;
			enum = "plat_speeds";
			default = 16;
		}
		
		arg2
		{
			title = "Crush Damage";
			default = 100;
		}
	}
	
	44
	{
		title = "Ceiling Crusher Stop";
		id = "Ceiling_CrushStop";
		
		arg0
		{
			title = "Sector Tag";
			type = 13;
		}
	}
	
	45
	{
		title = "Ceiling Crush Once and Open";
		id = "Ceiling_CrushRaiseAndStay";
		
		arg0
		{
			title = "Sector Tag";
			type = 13;
		}
		
		arg1
		{
			title = "Movement Speed";
			type = 11;
			enum = "plat_speeds";
			default = 16;
		}
		
		arg2
		{
			title = "Crush Damage";
			default = 100;
		}
	}
	
	69
	{
		title = "Ceiling Move to Value * 8";
		id = "Ceiling_MoveToValueTimes8";
		
		arg0
		{
			title = "Sector Tag";
			type = 13;
		}
		
		arg1
		{
			title = "Movement Speed";
			type = 11;
			enum = "plat_speeds";
			default = 16;
		}
		
		arg2
		{
			title = "Target Height * 8";
		}
		
		arg3
		{
			title = "Negative Height";
			type = 11;
			enum = "noyes";
		}
	}
}


platformu
{
	title = "Platform (UDMF)";
	
	60
	{
		title = "Platform Perpetual Move";
		id = "Plat_PerpetualRaise";
		
		arg0
		{
			title = "Sector Tag";
			type = 13;
		}
		
		arg1
		{
			title = "Movement Speed";
			type = 11;
			enum = "plat_speeds";
			default = 16;
		}
		
		arg2
		{
			title = "Reverse Delay (tics)";
			type = 11;
			enum = "delay_tics";
			default = 105;
		}
	}
	
	61
	{
		title = "Platform Stop";
		id = "Plat_Stop";
		
		arg0
		{
			title = "Sector Tag";
			type = 13;
		}
	}
	
	62
	{
		title = "Platform Lower Wait Raise";
		id = "Plat_DownWaitUpStay";
		
		arg0
		{
			title = "Sector Tag";
			type = 13;
		}
		
		arg1
		{
			title = "Movement Speed";
			type = 11;
			enum = "plat_speeds";
			default = 16;
		}
		
		arg2
		{
			title = "Reverse Delay (tics)";
			type = 11;
			enum = "delay_tics";
			default = 105;
		}
	}
	
	63
	{
		title = "Platform Lower by Value * 8";
		id = "Plat_DownByValue";
		
		arg0
		{
			title = "Sector Tag";
			type = 13;
		}
		
		arg1
		{
			title = "Movement Speed";
			type = 11;
			enum = "plat_speeds";
			default = 16;
		}
		
		arg2
		{
			title = "Reverse Delay (tics)";
			type = 11;
			enum = "delay_tics";
			default = 105;
		}
		
		arg3
		{
			title = "Lower by (* 8)";
		}
	}
	
	64
	{
		title = "Platform Raise Wait Lower";
		id = "Plat_UpWaitDownStay";
		
		arg0
		{
			title = "Sector Tag";
			type = 13;
		}
		
		arg1
		{
			title = "Movement Speed";
			type = 11;
			enum = "plat_speeds";
			default = 16;
		}
		
		arg2
		{
			title = "Reverse Delay (tics)";
			type = 11;
			enum = "delay_tics";
			default = 105;
		}
	}
	
	65
	{
		title = "Platform Raise by Value * 8";
		id = "Plat_UpByValue";
		
		arg0
		{
			title = "Sector Tag";
			type = 13;
		}
		
		arg1
		{
			title = "Movement Speed";
			type = 11;
			enum = "plat_speeds";
			default = 16;
		}
		
		arg2
		{
			title = "Reverse Delay (tics)";
			type = 11;
			enum = "delay_tics";
			default = 105;
		}
		
		arg3
		{
			title = "Raise by (* 8)";
		}
	}
}


teleportu
{
	title = "Teleport (UDMF)";
	
	70
	{
		title = "Teleport";
		id = "Teleport";
		
		arg0
		{
			title = "Target Teleport Dest. Tag";
			type = 14;
			targetclasses = "TeleportDest,TeleportDest2,TeleportDest3";
		}
		
		arg1
		{
			title = "Target Sector Tag";
			type = 13;
		}
	}
	
	71
	{
		title = "Teleport (silent)";
		id = "Teleport_NoFog";
		
		arg0
		{
			title = "Target Teleport Dest. Tag";
			type = 14;
			targetclasses = "TeleportDest,TeleportDest2,TeleportDest3";
		}
		
		arg1
		{
			title = "Keep Orientation";
			type = 11;
			enum = "noyes";
		}
		
		arg2
		{
			title = "Target Sector Tag";
			type = 13;
		}
	}
	
	74
	{
		title = "Teleport to Map";
		id = "Teleport_NewMap";
		
		arg0
		{
			title = "Map Number";
		}
		
		arg1
		{
			title = "Tgt Player Start Arg0";
		}
	}
}


thingu
{
	title = "Thing (UDMF)";
	
	72
	{
		title = "Thrust Thing";
		id = "ThrustThing";
		
		arg0
		{
			title = "Thrust Angle";
			type = 22;
		}
		
		arg1
		{
			title = "Thrust Force (mu. per tic)";
		}
	}
	
	73
	{
		title = "Damage Thing";
		id = "DamageThing";
		
		arg0
		{
			title = "Damage Amount";
		}
	}
	
	130
	{
		title = "Activate Thing";
		id = "Thing_Activate";
		
		arg0
		{
			title = "Thing Tag";
			type = 14;
		}
	}
	
	131
	{
		title = "Deactivate Thing";
		id = "Thing_Deactivate";
		
		arg0
		{
			title = "Thing Tag";
			type = 14;
		}
	}
	
	132
	{
		title = "Remove Thing";
		id = "Thing_Remove";
		
		arg0
		{
			title = "Thing Tag";
			type = 14;
		}
	}
	
	133
	{
		title = "Destroy Thing";
		id = "Thing_Destroy";
		
		arg0
		{
			title = "Thing Tag";
			type = 14;
		}
		arg1
		{
			title = "Extreme Death";
			type = 11;
			enum = "noyes";
		}
		arg2
		{
			title = "Sector Tag";
			type = 13;
		}

	}
	
	134
	{
		title = "Spawn Projectile";
		id = "Thing_Projectile";
		
		arg0
		{
			title = "MapSpot Tag";
			type = 14;
			targetclasses = "MapSpot,MapSpotGravity";
		}
		
		arg1
		{
			title = "Projectile Type";
			type = 11;
			enum = "spawn_projectile";
		}
		
		arg2
		{
			title = "Movement Angle";
			type = 22;
		}
		
		arg3
		{
			title = "Horizontal Speed";
		}
		
		arg4
		{
			title = "Vertical Speed";
		}
	}
	
	135
	{
		title = "Spawn Thing";
		id = "Thing_Spawn";
		
		arg0
		{
			title = "MapSpot Tag";
			type = 14;
			targetclasses = "MapSpot,MapSpotGravity";
		}
		
		arg1
		{
			title = "Thing Type";
			type = 11;
			enum = "spawnthing";
		}
		
		arg2
		{
			title = "Thing Angle";
			type = 22;
		}
	}
	
	136
	{
		title = "Spawn Projectile (gravity)";
		id = "Thing_ProjectileGravity";
		
		arg0
		{
			title = "MapSpot Tag";
			type = 14;
			targetclasses = "MapSpot,MapSpotGravity";
		}
		
		arg1
		{
			title = "Projectile Type";
			type = 11;
			enum = "spawn_projectile";
		}
		
		arg2
		{
			title = "Movement Angle";
			type = 22;
		}
		
		arg3
		{
			title = "Horizontal Speed";
		}
		
		arg4
		{
			title = "Vertical Speed";
		}
	}
	
	137
	{
		title = "Spawn Thing (silent)";
		id = "Thing_SpawnNoFog";
		
		arg0
		{
			title = "Target MapSpot Tag";
			type = 14;
			targetclasses = "MapSpot,MapSpotGravity";
		}
		
		arg1
		{
			title = "Thing Type";
			type = 11;
			enum = "spawnthing";
		}
		
		arg2
		{
			title = "Thing Angle";
			type = 22;
		}
	}
}


endu
{
	title = "End (UDMF)";
	
	75
	{
		title = "End Game";
		id = "Teleport_EndGame";
	}
}


scriptu
{
	title = "Script (UDMF)";
	
	80
	{
		title = "Script Execute";
		id = "ACS_Execute";
		
		arg0
		{
			title = "Script Number";
			str = true;
			titlestr = "Script Name";
		}
		
		arg1
		{
			title = "Map Number";
		}
		
		arg2
		{
			title = "Script Argument 1";
		}
		
		arg3
		{
			title = "Script Argument 2";
		}
		
		arg4
		{
			title = "Script Argument 3";
		}
	}
	
	81
	{
		title = "Script Suspend";
		id = "ACS_Suspend";
		
		arg0
		{
			title = "Script Number";
			str = true;
			titlestr = "Script Name";
		}
		
		arg1
		{
			title = "Map Number";
		}
	}
	
	82
	{
		title = "Script Terminate";
		id = "ACS_Terminate";
		
		arg0
		{
			title = "Script Number";
			str = true;
			titlestr = "Script Name";
		}
		
		arg1
		{
			title = "Map Number";
		}
	}
	
	83
	{
		title = "Script Locked Execute";
		id = "ACS_LockedExecute";
		
		arg0
		{
			title = "Script Number";
			str = true;
			titlestr = "Script Name";
		}
		
		arg1
		{
			title = "Map Number";
		}
		
		arg2
		{
			title = "Script Argument 1";
		}
		
		arg3
		{
			title = "Script Argument 2";
		}
		
		arg4
		{
			title = "Key Number";
			type = 11;
			enum = "keys";
		}
	}
}


scrollu
{
	title = "Scroll (UDMF)";
	
	100
	{
		title = "Scroll Texture Left";
		id = "Scroll_Texture_Left";
		requiresactivation = false;
		
		arg0
		{
			title = "Scroll Speed";
			type = 11;
			enum = "scroll_speeds";
			default = 64;
		}
	}
	
	101
	{
		title = "Scroll Texture Right";
		id = "Scroll_Texture_Right";
		requiresactivation = false;
		
		arg0
		{
			title = "Scroll Speed";
			type = 11;
			enum = "scroll_speeds";
			default = 64;
		}
	}
	
	102
	{
		title = "Scroll Texture Up";
		id = "Scroll_Texture_Up";
		requiresactivation = false;
		
		arg0
		{
			title = "Scroll Speed";
			type = 11;
			enum = "scroll_speeds";
			default = 64;
		}
	}
	
	103
	{
		title = "Scroll Texture Down";
		id = "Scroll_Texture_Down";
		requiresactivation = false;
		
		arg0
		{
			title = "Scroll Speed";
			type = 11;
			enum = "scroll_speeds"; 
			default = 64;
		}
	}
}


lightu
{
	title = "Light (UDMF)";
	
	109
	{
		title = "Force lightning";
		id = "Light_ForceLightning";
		arg0
		{
			title = "Tics";
		}
	}

	110
	{
		title = "Light Raise by Value";
		id = "Light_RaiseByValue";
		
		arg0
		{
			title = "Sector Tag";
			type = 13;
		}
		
		arg1
		{
			title = "Raise by";
		}
	}
	
	111
	{
		title = "Light Lower by Value";
		id = "Light_LowerByValue";
		
		arg0
		{
			title = "Sector Tag";
			type = 13;
		}
		
		arg1
		{
			title = "Lower by";
		}
	}
	
	112
	{
		title = "Light Change to Value";
		id = "Light_ChangeToValue";
		
		arg0
		{
			title = "Sector Tag";
			type = 13;
		}
		
		arg1
		{
			title = "Target Brightness";
		}
	}
	
	113
	{
		title = "Light Fade";
		id = "Light_Fade";
		
		arg0
		{
			title = "Sector Tag";
			type = 13;
		}
		
		arg1
		{
			title = "Target Brightness";
			default = 128;
		}
		
		arg2
		{
			title = "Fade Duration (tics)";
			type = 11;
			enum = "delay_tics";
			default = 105;
		}
	}
	
	114
	{
		title = "Light Glow";
		id = "Light_Glow";
		
		arg0
		{
			title = "Sector Tag";
			type = 13;
		}
		
		arg1
		{
			title = "Brightest Level";
			default = 255;
		}
		
		arg2
		{
			title = "Darkest Level";
			default = 128;
		}
		
		arg3
		{
			title = "Fade Duration (tics)";
			type = 11;
			enum = "delay_tics";
			default = 105;
		}
	}
	
	115
	{
		title = "Light Flicker";
		id = "Light_Flicker";
		
		arg0
		{
			title = "Sector Tag";
			type = 13;
		}
		
		arg1
		{
			title = "Brightest Level";
			default = 255;
		}
		
		arg2
		{
			title = "Darkest Level";
			default = 128;
		}
	}
	
	116
	{
		title = "Light Strobe";
		id = "Light_Strobe";
		
		arg0
		{
			title = "Sector Tag";
			type = 13;
		}
		
		arg1
		{
			title = "Brightest Level";
			default = 255;
		}
		
		arg2
		{
			title = "Darkest Level";
			default = 128;
		}
		
		arg3
		{
			title = "Brightest Duration";
			type = 11;
			enum = "delay_tics";
			default = 35;
		}
		
		arg4
		{
			title = "Darkest Duration";
			type = 11;
			enum = "delay_tics";
			default = 35;
		}
	}
}


earthquakeu
{
	title = "Earthquake (UDMF)";
	
	120
	{
		title = "Earthquake";
		id = "Radius_Quake";
		
		arg0
		{
			title = "Intensity (1-9)";
			default = 2;
		}
		
		arg1
		{
			title = "Duration (tics)";
			type = 11;
			enum = "delay_tics";
			default = 150;
		}
		
		arg2
		{
			title = "Damage Radius * 64";
			default = 4;
		}
		
		arg3
		{
			title = "Tremor Radius * 64";
			default = 4;
		}
		
		arg4
		{
			title = "Focus Thing Tag";
			type = 14;
		}
	}
}


useu
{
	title = "Use (UDMF)";
	
	129
	{
		title = "Use Puzzle Item";
		id = "UsePuzzleItem";
		
		arg0
		{
			title = "Item Number";
			type = 11;
			enum = "puzzle_items";
		}

		arg1
		{
			title = "Script Number";
		}
		
		arg2
		{
			title = "Script Argument 1";
		}
		
		arg3
		{
			title = "Script Argument 2";
		}
		
		arg4
		{
			title = "Script Argument 3";
		}
	}
}


sectoru
{
	title = "Sector (UDMF)";
	
	140
	{
		title = "Sector Change Sound";
		id = "Sector_ChangeSound";
		
		arg0
		{
			title = "Sector Tag";
			type = 13;
		}
		
		arg1
		{
			title = "Sound Number";
		}
	}
}



}


// Generalized linedef types
gen_linedeftypes
{
	include("Includes\\Boom_generalized.cfg", "gen_linedeftypes");
}


// THING FLAGS
thingflags
{
	skill1 = "Skill 1";
	skill2 = "Skill 2";
	skill3 = "Skill 3";
	skill4 = "Skill 4";
	skill5 = "Skill 5";
	ambush = "Deaf";
	single = "Singleplayer";
	dm = "Deathmatch";
	coop = "Cooperative";
	friend = "Friendly";
	passuse = "PassThru";
}

// THING FLAGS
thingflags
{
	onmiddlefloor = "On Middle Floor";
	notriggerscripts = "Not trigger PascalScript";
	friend = "Friendly Monster";
}

// Thing flags UDMF translation table
// This is needed for copy/paste and prefabs to work properly
// When the UDMF field name is prefixed with ! it is inverted
thingflagstranslation
{
	include("Includes\\Doom_misc.cfg", "thingflagstranslation");
	include("Includes\\Boom_misc.cfg", "thingflagstranslation");
	128 = "onmiddlefloor";
	256 = "notriggerscripts";
	512 = "friend";
}


// Things flags masks
include("Includes\\Doom_misc.cfg", "thingflagsmasks");


// THING TYPES
thingtypes
{
	include("Includes\\Doom_things.cfg");
	include("Includes\\Doom2_things.cfg");
	include("Includes\\Boom_things.cfg");

spots
{
	color = 8;	// Grey
	arrow = 1;
	title = "Map spots";
	width = 8;
	sort = 1;
	height = 8;
	hangs = 0;
	blocking = 0;

	9001
	{
		title = "Map Spot";
	}

	9013
	{
		title = "Map Spot (Gravity)";
	}
}

easyslope
{
	color = 8;	// Grey
	arrow = 1;
	title = "Easy slopes";
	width = 8;
	sort = 1;
	height = 8;
	hangs = 0;
	blocking = 0;
	
	1150
	{
		title = "Raise floor to angle (1 of 3)";
	}
	1151
	{
		title = "Lower floor to angle (1 of 3)";
	}
	1152
	{
		title = "Raise ceiling to angle (1 of 3)";
	}
	1153
	{
		title = "Lower ceiling to angle (1 of 3)";
	}

	1154
	{
		title = "Vertex raise floor to angle";
	}
	1155
	{
		title = "Vertext lower floor to angle";
	}
	1156
	{
		title = "Vertex raise ceiling to angle";
	}
	1157
	{
		title = "Vertex lower ceiling to angle";
	}
}

easyangle
{
	color = 8;	// Grey
	arrow = 1;
	title = "Easy angle";
	width = 8;
	sort = 1;
	height = 8;
	hangs = 0;
	blocking = 0;
	
	1158
	{
		title = "Rotate floor texture to angle";
	}
	1159
	{
		title = "Rotate ceiling texture to angle";
	}
}

wind
{
	color = 8;	// Grey
	arrow = 1;
	title = "Wind";
	width = 8;
	sort = 1;
	height = 8;
	hangs = 0;
	blocking = 0;
	
	1160
	{
		title = "Sector Wind (5x)";
	}
	1161
	{
		title = "Sector Wind (10x)";
	}
	1162
	{
		title = "Sector Wind (15x)";
	}
	1163
	{
		title = "Sector Wind (20x)";
	}
	1164
	{
		title = "Sector Wind (25x)";
	}
}

PolyObj
{
	color = 7;	// Light Grey
	arrow = 1;
	title = "Poly Objects";
	sort = 1;
	width = 10;
	height = 20;
	hangs = 0;
	blocking = 0;
	fixedsize = true;
	sprite = "internal:arrow";

	9300
	{
		title = "Polyobject Anchor";
		sprite = "internal:anchor";
		class = "$PolyAnchor";
		fixedrotation = true;
		error = 0; // Can be outside of map geometry
	}
		 
	9301
	{
		title = "Polyobject Start Spot";
		sprite = "internal:anchor";
		class = "$PolySpawn";
		fixedrotation = true;
	}
		
	9302
	{
		title = "Polyobject Start Spot (crush)";
		sprite = "internal:anchor";
		class = "$PolySpawnCrush";
		fixedrotation = true;
	}
}

}

// Default thing filters
// (these are not required, just usefull for new users)
thingsfilters
{
	include("Includes\\Doom_misc.cfg", "thingsfilters");
}


// Default texture sets
// (these are not required, but usefull for new users)
texturesets
{
	include("Includes\\Doom_texturesets.cfg");
}
