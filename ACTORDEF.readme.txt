Custom actor support for DelphiDoom is supported via ACTORDEF lump.
This is a text file, quite similar, with zDoom's DECORATE lumps (at the time of writting these lines ~year 2008). 
You can take a look inside at DelphiDoom monsters pak (DDMONSTERS.WAD) which contains more than 70 new defined actors in ACTORDEF lumps.
Lastest version of DDMONSTERS.WAD can be downloaded at https://sourceforge.net/projects/delphidoom/files/Tools%2C%20maps%20and%20examples/DD_MONSTERS_20190917.zip/download

To define the enemy flag FLOATBOB you can write:
+FLOATBOB or
FLOATBOB or
MF_FLOATBOB or
MF_EX_FLOATBOB
All the above means the same to DelphiDoom ACTORDEF parser.

In addition to define a missile you can either specify the
DEFAULTMISSILE flag or define individual the flags that describe a missile:
MISSILE
NOGRAVITY
NOBLOCKMAP
DROPOFF

There is also the DEFAULTTRANSPARENT flag to define default transparency (equivelant to RENDERSTYLE TRANSLUCENT and ALPHA 0.67).

Sound aliases are located in SNDINFO lumps. $RANDOM directive is not supported but you can specify RANDOMSEESOUND, RANDOMPAINSOUND etc as the actor flags. Random sound system will do the following search for random sounds: For example we have an actor with

+RANDOMSEESOUND
seesound "DSSEE1"

DelphiDoom automatically will check DSSEE2, DSSEE3, .. DSSEE9 if present in WADs and create a random sound list.

Also DelphiDoom supports some more actor fields such as:
CUSTOMSOUND1
CUSTOMSOUND2
CUSTOMSOUND3

There are also some DelphiDoom specific flags: 
FLAGS_EX:  
  MF_EX_TRANSPARENT // Sprite is transparent
  
  MF_EX_WHITELIGHT // Sprite emits white light
  
  MF_EX_REDLIGHT // Sprite emits red light
  
  MF_EX_GREENLIGHT // Sprite emits green light
  
  MF_EX_BLUELIGHT // Sprite emits blue light
  
  MF_EX_YELLOWLIGHT // Sprite emits yellow light
  
  MF_EX_FLOATBOB // Float BOB
  
  MF_EX_NORADIUSDMG // No Radius Damage
  
  MF_EX_FIRERESIST // Half the damage
  
  MF_EX_RANDOMSEESOUND // Random see sound
  
  MF_EX_RANDOMPAINSOUND // Random pain sound
  
  MF_EX_RANDOMATTACKSOUND // Random attack sound
  
  MF_EX_RANDOMDEATHSOUND // Random death sound
  
  MF_EX_RANDOMACTIVESOUND // Random active sound
  
  MF_EX_RANDOMCUSTOMSOUND1 // Random customsound1
  
  MF_EX_RANDOMCUSTOMSOUND2 // Random customsound2
  
  MF_EX_RANDOMCUSTOMSOUND3 // Random customsound3
  
  MF_EX_CUSTOMEXPLODE // Custom Explosion (see A_Explode)
  
  MF_EX_BOSS // The think is boss
  
  MF_EX_FLOORHUGGER // Missile stays on floor
  
  MF_EX_CEILINGHUGGER // Missile stays on ceiling
  
  MF_EX_SEEKERMISSILE // Missile is a seeker
  
  MF_EX_SPAWNFLOAT // Mobj spawn on random float z
  
  MF_EX_DONTHURTSPECIES // Don't hurt one's own kind with explosions
  
  MF_EX_LOWGRAVITY // Low gravity
  
  MF_EX_INVULNERABLE // Invulnerable
  
  MF_EX_RANDOMMELEESOUND // Random meleesound
  
  MF_EX_DONOTREMOVE // Don't remove missile
  
  MF_EX_GHOST // Thing is a ghost
  
  MF_EX_THRUGHOST // Pass thru ghosts
  
  MF_EX_LOOKALLAROUND // Monster can look all around, has eyes in the back

FLAGS2_EX:
  
  MF2_EX_MEDIUMGRAVITY // Medium gravity
  
  MF2_EX_NOHITFLOOR // No P_HitFloor call
  
  MF2_EX_GREENBLOOD // Green Blood
  
  MF2_EX_BLUEBLOOD // Blue Blood
  
  MF2_EX_NOTELEPORT // No teleport flag
  
  MF2_EX_PUSHABLE // Pushable things
  
  MF2_EX_CANNOTPUSH // Mobj can not push
  
  MF2_EX_DONTDRAW // don't generate a vissprite
  
  MF2_EX_INTERACTIVE // Interactive mobj - can be set to interact state
  
  MF2_EX_DONTINFIGHTMONSTERS // Don't return fire if attacker has same inheritance
  
  MF2_EX_FLOORCLIP // Floorclip
  
  MF2_EX_FRIGHTENED // Monster walks away
  
  MF2_EX_NODAMAGE // No damage
  
  MF2_EX_ONMOBJ // mobj is resting on top of another mobj
  
  MF2_EX_PASSMOBJ // Enable z block checking.  If on, this flag will allow the mobj to pass over/under other mobjs.
  
  MF2_EX_DONTRUNSCRIPTS // Dissable scripts
  
  MF2_EX_PRECISESPAWNANGLE // Use precise spawnangle
  
  MF2_EX_CUSTOMDROPITEM // Use custom drop item
  
  MF2_EX_CANTLEAVEFLOORPIC // Can not go to sector with different floor picture

  // From zDoom wiki:
  // Actors with this flag set will often (about 92% chance) decide to jump down
  // tall ledges to pursue their target, if said target is hostile
  MF2_EX_JUMPDOWN 

  MF2_EX_FULLVOLACTIVE // Active Sound at full volume
  MF2_EX_FULLVOLDEATH // Death Sound at full volume
  MF2_EX_FULLVOLSEE // See Sound at full volume
  MF2_EX_FULLVOLPAIN // Pain Sound at full volume
  MF2_EX_FULLVOLATTACK // Attack Sound at full volume
  
  MF2_EX_DONOTRENDERSHADOW // Do not render shadow

Current ACTORDEF functions that DelphiDoom supports:
(DelphiHeretic, DelphiHexen & DelphiStrife will use additional/other standard functions).
----------------------------------------------------
// Standard functions:
A_LIGHT0
A_WEAPONREADY
A_LOWER
A_RAISE
A_PUNCH
A_REFIRE
A_FIREPISTOL
A_LIGHT1
A_FIRESHOTGUN
A_LIGHT2
A_FIRESHOTGUN2
A_CHECKRELOAD
A_OPENSHOTGUN2
A_LOADSHOTGUN2
A_CLOSESHOTGUN2
A_FIRECGUN
A_GUNFLASH
A_FIREMISSILE
A_SAW
A_FIREPLASMA
A_BFGSOUND
A_FIREBFG
A_BFGSPRAY
A_EXPLODE
A_PAIN
A_PLAYERSCREAM
A_FALL
A_XSCREAM
A_LOOK
A_CHASE
A_FACETARGET
A_POSATTACK
A_SCREAM
A_SPOSATTACK
A_VILECHASE
A_VILESTART
A_VILETARGET
A_VILEATTACK
A_STARTFIRE
A_FIRE
A_FIRECRACKLE
A_TRACER
A_SKELWHOOSH
A_SKELFIST
A_SKELMISSILE
A_FATRAISE
A_FATATTACK1
A_FATATTACK2
A_FATATTACK3
A_BOSSDEATH
A_CPOSATTACK
A_CPOSREFIRE
A_TROOPATTACK
A_SARGATTACK
A_HEADATTACK
A_BRUISATTACK
A_SKULLATTACK
A_METAL
A_SPIDREFIRE
A_BABYMETAL
A_BSPIATTACK
A_HOOF
A_CYBERATTACK
A_PAINATTACK
A_PAINDIE
A_KEENDIE
A_BRAINPAIN
A_BRAINSCREAM
A_BRAINDIE
A_BRAINAWAKE
A_BRAINSPIT
A_SPAWNSOUND
A_SPAWNFLY
A_BRAINEXPLODE
// The following are custom defined actions:
A_CUSTOMSOUND1
A_CUSTOMSOUND2
A_CUSTOMSOUND3
A_RANDOMPAINSOUND
A_RANDOMSEESOUND
A_RANDOMATTACKSOUND
A_RANDOMDEATHSOUND
A_RANDOMACTIVESOUND
A_RANDOMCUSTOMSOUND1
A_RANDOMCUSTOMSOUND2
A_RANDOMCUSTOMSOUND3
A_RANDOMCUSTOMSOUND
A_ANNIHILATORATTACK
A_PLAYSOUND
A_RANDOMSOUND
A_STOP
A_JUMP
A_CUSTOMMISSILE
A_NOGRAVITY
A_GRAVITY
A_NOBLOCKING
A_MELEEATTACK
A_SPAWNITEM
A_SEEKERMISSILE
A_CSTAFFMISSILESLITHER
A_SETTRANSLUCENT
A_DIE
A_CUSTOMBULLETATTACK
A_FADEOUT
A_FADEIN
A_MISSILEATTACK
A_ADJUSTSIDESPOT
A_COUNTDOWN
A_FASTCHASE
A_LOWGRAVITY
A_THRUSTZ
A_THRUSTXY
A_TURN
A_JUMPIFCLOSER
A_JUMPIFHEALTHLOWER
A_SCREAMANDUNBLOCK
A_PLAYWEAPONSOUND
A_SETINVULNERABLE
A_UNSETINVULNERABLE
A_RANDOMMELEESOUND
A_FLOATBOB
A_NOFLOATBOB
A_MISSILE
A_NOMISSILE
A_COMBOATTACK
A_BULLETATTACK
A_MEDIUMGRAVITY
A_WANDER
A_FadeOut10
A_FadeOut20
A_FadeOut30
A_FadeIn10
A_FadeIn20
A_FadeIn30
A_SpawnItemEx
A_RandomMissile
A_HideThing
A_UnHideThing
A_SpawnDebris
A_Turn5
A_Turn10
A_SpawnSmokeUp
A_SpawnSmokeDown
A_SpawnSmokeHorz
A_SetInteractive
A_UnSetInteractive
A_SetMonsterInfight
A_UnSetMonsterInfight
A_RemoveMobj
A_NoiseAlert
A_ConsoleCommand
A_SetCustomParam
A_AddCustomParam
A_SubtractCustomParam
A_SetTargetCustomParam
A_AddTargetCustomParam
A_SubtractTargetCustomParam
A_JumpIfCustomParam
A_JumpIfCustomParamLess
A_JumpIfCustomParamGreater
A_JumpIfTargetCustomParam
A_JumpIfTargetCustomParamLess
A_JumpIfTargetCustomParamGreater
A_SetShootable
A_UnSetShootable
A_PlayerMessage
A_PlayerFaceMe
A_GoTo
A_GoToIfCloser
A_GoToIfHealthLower
A_GoToIfCustomParam
A_GoToIfCustomParamLess
A_GoToIfCustomParamGreater
A_GoToIfTargetCustomParam
A_GoToIfTargetCustomParamLess
A_GoToIfTargetCustomParamGreater
A_SetFloorClip
A_UnSetFloorClip
A_SetFrightened
A_UnSetFrightened
A_SetNoDamage
A_UnSetNoDamage
A_RunScript
A_GhostOn
A_GhostOff
A_Blocking
A_DoNotRunScripts
A_DoRunScripts
A_TargetDropItem
A_DefaultTargetDropItem
A_SetDropItem
A_SetDefaultDropItem
A_GlobalEarthQuake
A_JumpIfMapStringEqual
A_JumpIfMapStringLess
A_JumpIfMapStringGreater
A_JumpIfMapIntegerEqual
A_JumpIfMapIntegerLess
A_JumpIfMapIntegerGreater
A_JumpIfMapFloatEqual
A_JumpIfMapFloatLess
A_JumpIfMapFloatGreater
A_JumpIfWorldStringEqual
A_JumpIfWorldStringLess
A_JumpIfWorldStringGreater
A_JumpIfWorldIntegerEqual
A_JumpIfWorldIntegerLess
A_JumpIfWorldIntegerGreater
A_JumpIfWorldFloatEqual
A_JumpIfWorldFloatLess
A_JumpIfWorldFloatGreater
A_GoToIfMapStringEqual
A_GoToIfMapStringLess
A_GoToIfMapStringGreater
A_GoToIfMapIntegerEqual
A_GoToIfMapIntegerLess
A_GoToIfMapIntegerGreater
A_GoToIfMapFloatEqual
A_GoToIfMapFloatLess
A_GoToIfMapFloatGreater
A_GoToIfWorldStringEqual
A_GoToIfWorldStringLess
A_GoToIfWorldStringGreater
A_GoToIfWorldIntegerEqual
A_GoToIfWorldIntegerLess
A_GoToIfWorldIntegerGreater
A_GoToIfWorldFloatEqual
A_GoToIfWorldFloatLess
A_GoToIfWorldFloatGreater
A_SetMapStr
A_SetWorldStr
A_SetMapInt
A_SetWorldInt
A_SetMapFloat
A_SetWorldFloat
A_RandomGoto
A_ResetHealth
